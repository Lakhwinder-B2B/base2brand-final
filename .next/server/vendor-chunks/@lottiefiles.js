"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@lottiefiles";
exports.ids = ["vendor-chunks/@lottiefiles"];
exports.modules = {

/***/ "(ssr)/./node_modules/@lottiefiles/dotlottie-react/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@lottiefiles/dotlottie-react/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DotLottieReact: () => (/* binding */ DotLottieReact),\n/* harmony export */   setWasmUrl: () => (/* binding */ setWasmUrl),\n/* harmony export */   useDotLottie: () => (/* binding */ useDotLottie)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod)=>function __require() {\n        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n            exports: {}\n        }).exports, mod), mod.exports;\n    };\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\n// ../../node_modules/.pnpm/debounce@2.0.0/node_modules/debounce/index.js\nvar require_debounce = __commonJS({\n    \"../../node_modules/.pnpm/debounce@2.0.0/node_modules/debounce/index.js\" (exports, module) {\n        function debounce2(function_, wait = 100, options = {}) {\n            if (typeof function_ !== \"function\") {\n                throw new TypeError(`Expected the first parameter to be a function, got \\`${typeof function_}\\`.`);\n            }\n            if (wait < 0) {\n                throw new RangeError(\"`wait` must not be negative.\");\n            }\n            const { immediate } = typeof options === \"boolean\" ? {\n                immediate: options\n            } : options;\n            let storedContext;\n            let storedArguments;\n            let timeoutId;\n            let timestamp;\n            let result;\n            function later() {\n                const last = Date.now() - timestamp;\n                if (last < wait && last >= 0) {\n                    timeoutId = setTimeout(later, wait - last);\n                } else {\n                    timeoutId = void 0;\n                    if (!immediate) {\n                        const callContext = storedContext;\n                        const callArguments = storedArguments;\n                        storedContext = void 0;\n                        storedArguments = void 0;\n                        result = function_.apply(callContext, callArguments);\n                    }\n                }\n            }\n            const debounced = function(...arguments_) {\n                if (storedContext && this !== storedContext) {\n                    throw new Error(\"Debounced method called with different contexts.\");\n                }\n                storedContext = this;\n                storedArguments = arguments_;\n                timestamp = Date.now();\n                const callNow = immediate && !timeoutId;\n                if (!timeoutId) {\n                    timeoutId = setTimeout(later, wait);\n                }\n                if (callNow) {\n                    const callContext = storedContext;\n                    const callArguments = storedArguments;\n                    storedContext = void 0;\n                    storedArguments = void 0;\n                    result = function_.apply(callContext, callArguments);\n                }\n                return result;\n            };\n            debounced.clear = ()=>{\n                if (!timeoutId) {\n                    return;\n                }\n                clearTimeout(timeoutId);\n                timeoutId = void 0;\n            };\n            debounced.flush = ()=>{\n                if (!timeoutId) {\n                    return;\n                }\n                const callContext = storedContext;\n                const callArguments = storedArguments;\n                storedContext = void 0;\n                storedArguments = void 0;\n                result = function_.apply(callContext, callArguments);\n                clearTimeout(timeoutId);\n                timeoutId = void 0;\n            };\n            return debounced;\n        }\n        module.exports.debounce = debounce2;\n        module.exports = debounce2;\n    }\n});\n// ../web/dist/index.js\nvar Yi = Object.defineProperty;\nvar Ni = (y, a, o)=>a in y ? Yi(y, a, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: o\n    }) : y[a] = o;\nvar F = (y, a, o)=>(Ni(y, typeof a != \"symbol\" ? a + \"\" : a, o), o);\nvar et = class {\n    requestAnimationFrame(a) {\n        return requestAnimationFrame(a);\n    }\n    cancelAnimationFrame(a) {\n        cancelAnimationFrame(a);\n    }\n};\nvar tt = class {\n    constructor(){\n        F(this, \"_lastHandleId\", 0);\n        F(this, \"_lastImmediate\", null);\n    }\n    requestAnimationFrame(a) {\n        return this._lastHandleId >= Number.MAX_SAFE_INTEGER && (this._lastHandleId = 0), this._lastHandleId += 1, this._lastImmediate = setImmediate(()=>{\n            a(Date.now());\n        }), this._lastHandleId;\n    }\n    cancelAnimationFrame(a) {\n        this._lastImmediate && clearImmediate(this._lastImmediate);\n    }\n};\nvar Se = class {\n    constructor(){\n        F(this, \"_strategy\");\n        this._strategy = typeof requestAnimationFrame == \"function\" ? new et() : new tt();\n    }\n    requestAnimationFrame(a) {\n        return this._strategy.requestAnimationFrame(a);\n    }\n    cancelAnimationFrame(a) {\n        this._strategy.cancelAnimationFrame(a);\n    }\n};\nvar rt =  false && 0;\nvar me = {\n    name: \"@lottiefiles/dotlottie-web\",\n    version: \"0.25.0\",\n    type: \"module\",\n    description: \"Lottie and DotLottie player for the web\",\n    repository: {\n        type: \"git\",\n        url: \"git+https://github.com/LottieFiles/dotlottie-web.git\",\n        directory: \"packages/web\"\n    },\n    homepage: \"https://github.com/LottieFiles/dotlottie-web#readme\",\n    bugs: \"https://github.com/LottieFiles/dotlottie-web/issues\",\n    author: \"LottieFiles\",\n    contributors: [\n        \"Abdelrahman Ashraf <a.theashraf@gmail.com>\"\n    ],\n    license: \"MIT\",\n    main: \"dist/index.cjs\",\n    module: \"dist/index.js\",\n    types: \"dist/index.d.ts\",\n    files: [\n        \"dist\"\n    ],\n    keywords: [\n        \"dotlottie\",\n        \"lottie\",\n        \"player\",\n        \"animation\",\n        \"web\",\n        \"canvas\",\n        \"javascript\",\n        \"thorvg\"\n    ],\n    scripts: {\n        build: \"tsup\",\n        dev: \"tsup --watch\",\n        lint: \"eslint --fix .\",\n        \"stats:eslint\": \"cross-env TIMING=1 eslint .\",\n        \"stats:ts\": \"tsc -p tsconfig.build.json --extendedDiagnostics\",\n        test: \"vitest run --browser.headless\",\n        \"test:coverage\": \"vitest run --browser.headless --coverage\",\n        \"test:watch\": \"vitest\",\n        \"type-check\": \"tsc --noEmit\"\n    },\n    devDependencies: {\n        \"@types/node\": \"^20.10.5\",\n        \"@vitest/browser\": \"^1.2.2 \",\n        \"@vitest/coverage-istanbul\": \"^1.2.2\",\n        \"cross-env\": \"7.0.3\",\n        tsup: \"8.0.1\",\n        typescript: \"5.0.4\",\n        vitest: \"^1.2.2\",\n        webdriverio: \"^8.32.0\"\n    },\n    publishConfig: {\n        access: \"public\"\n    }\n};\nvar Xi = (()=>{\n    var y = typeof document < \"u\" ? document.currentScript?.src : void 0;\n    return function(a = {}) {\n        var o = a, h, E, N = new Promise((e, t)=>{\n            h = e, E = t;\n        }), Q = Object.assign({}, o), st = \"./this.program\", lt = true, U = \"\";\n        function er(e) {\n            return o.locateFile ? o.locateFile(e, U) : U + e;\n        }\n        typeof document < \"u\" && document.currentScript && (U = document.currentScript.src), y && (U = y), U.startsWith(\"blob:\") ? U = \"\" : U = U.substr(0, U.replace(/[?#].*/, \"\").lastIndexOf(\"/\") + 1);\n        var nr = o.print || console.log.bind(console), ee = o.printErr || console.error.bind(console);\n        Object.assign(o, Q), Q = null, o.arguments && o.arguments, o.thisProgram && (st = o.thisProgram), o.quit && o.quit;\n        var oe;\n        o.wasmBinary && (oe = o.wasmBinary);\n        var ye, ut = false, W, $, te, se, A, w, dt, ct;\n        function vt() {\n            var e = ye.buffer;\n            o.HEAP8 = W = new Int8Array(e), o.HEAP16 = te = new Int16Array(e), o.HEAPU8 = $ = new Uint8Array(e), o.HEAPU16 = se = new Uint16Array(e), o.HEAP32 = A = new Int32Array(e), o.HEAPU32 = w = new Uint32Array(e), o.HEAPF32 = dt = new Float32Array(e), o.HEAPF64 = ct = new Float64Array(e);\n        }\n        var ft = [], pt = [], ht = [];\n        function or() {\n            if (o.preRun) for(typeof o.preRun == \"function\" && (o.preRun = [\n                o.preRun\n            ]); o.preRun.length;)ur(o.preRun.shift());\n            Ie(ft);\n        }\n        function sr() {\n            Ie(pt);\n        }\n        function lr() {\n            if (o.postRun) for(typeof o.postRun == \"function\" && (o.postRun = [\n                o.postRun\n            ]); o.postRun.length;)cr(o.postRun.shift());\n            Ie(ht);\n        }\n        function ur(e) {\n            ft.unshift(e);\n        }\n        function dr(e) {\n            pt.unshift(e);\n        }\n        function cr(e) {\n            ht.unshift(e);\n        }\n        var X = 0, le = null;\n        function vr(e) {\n            X++, o.monitorRunDependencies?.(X);\n        }\n        function fr(e) {\n            if (X--, o.monitorRunDependencies?.(X), X == 0 && le) {\n                var t = le;\n                le = null, t();\n            }\n        }\n        function be(e) {\n            o.onAbort?.(e), e = \"Aborted(\" + e + \")\", ee(e), ut = true, e += \". Build with -sASSERTIONS for more info.\";\n            var t = new WebAssembly.RuntimeError(e);\n            throw E(t), t;\n        }\n        var pr = \"data:application/octet-stream;base64,\", _t = (e)=>e.startsWith(pr), re;\n        re = \"DotLottiePlayer.wasm\", _t(re) || (re = er(re));\n        function mt(e) {\n            if (e == re && oe) return new Uint8Array(oe);\n            throw \"both async and sync fetching of the wasm failed\";\n        }\n        function hr(e) {\n            return !oe && lt && typeof fetch == \"function\" ? fetch(e, {\n                credentials: \"same-origin\"\n            }).then((t)=>{\n                if (!t.ok) throw `failed to load wasm binary file at '${e}'`;\n                return t.arrayBuffer();\n            }).catch(()=>mt(e)) : Promise.resolve().then(()=>mt(e));\n        }\n        function gt(e, t, r) {\n            return hr(e).then((n)=>WebAssembly.instantiate(n, t)).then(r, (n)=>{\n                ee(`failed to asynchronously prepare wasm: ${n}`), be(n);\n            });\n        }\n        function _r(e, t, r, n) {\n            return !e && typeof WebAssembly.instantiateStreaming == \"function\" && !_t(t) && typeof fetch == \"function\" ? fetch(t, {\n                credentials: \"same-origin\"\n            }).then((i)=>{\n                var s = WebAssembly.instantiateStreaming(i, r);\n                return s.then(n, function(u) {\n                    return ee(`wasm streaming compile failed: ${u}`), ee(\"falling back to ArrayBuffer instantiation\"), gt(t, r, n);\n                });\n            }) : gt(t, r, n);\n        }\n        function mr() {\n            var e = {\n                a: hi\n            };\n            function t(n, i) {\n                return b = n.exports, ye = b.ka, vt(), kt = b.oa, dr(b.la), fr(), b;\n            }\n            vr();\n            function r(n) {\n                t(n.instance);\n            }\n            if (o.instantiateWasm) try {\n                return o.instantiateWasm(e, t);\n            } catch (n) {\n                ee(`Module.instantiateWasm callback failed with error: ${n}`), E(n);\n            }\n            return _r(oe, re, e, r).catch(E), {};\n        }\n        var Ie = (e)=>{\n            for(; e.length > 0;)e.shift()(o);\n        };\n        o.noExitRuntime || true;\n        var I = (e)=>zt(e), j = ()=>Yt(), yt = typeof TextDecoder < \"u\" ? new TextDecoder(\"utf8\") : void 0, bt = (e, t, r)=>{\n            for(var n = t + r, i = t; e[i] && !(i >= n);)++i;\n            if (i - t > 16 && e.buffer && yt) return yt.decode(e.subarray(t, i));\n            for(var s = \"\"; t < i;){\n                var u = e[t++];\n                if (!(u & 128)) {\n                    s += String.fromCharCode(u);\n                    continue;\n                }\n                var l = e[t++] & 63;\n                if ((u & 224) == 192) {\n                    s += String.fromCharCode((u & 31) << 6 | l);\n                    continue;\n                }\n                var d = e[t++] & 63;\n                if ((u & 240) == 224 ? u = (u & 15) << 12 | l << 6 | d : u = (u & 7) << 18 | l << 12 | d << 6 | e[t++] & 63, u < 65536) s += String.fromCharCode(u);\n                else {\n                    var v = u - 65536;\n                    s += String.fromCharCode(55296 | v >> 10, 56320 | v & 1023);\n                }\n            }\n            return s;\n        }, G = (e, t)=>e ? bt($, e, t) : \"\", gr = (e, t, r, n)=>{\n            be(`Assertion failed: ${G(e)}, at: ` + [\n                t ? G(t) : \"unknown filename\",\n                r,\n                n ? G(n) : \"unknown function\"\n            ]);\n        }, ne = 0;\n        class Ct {\n            constructor(t){\n                this.excPtr = t, this.ptr = t - 24;\n            }\n            set_type(t) {\n                w[this.ptr + 4 >> 2] = t;\n            }\n            get_type() {\n                return w[this.ptr + 4 >> 2];\n            }\n            set_destructor(t) {\n                w[this.ptr + 8 >> 2] = t;\n            }\n            get_destructor() {\n                return w[this.ptr + 8 >> 2];\n            }\n            set_caught(t) {\n                t = t ? 1 : 0, W[this.ptr + 12] = t;\n            }\n            get_caught() {\n                return W[this.ptr + 12] != 0;\n            }\n            set_rethrown(t) {\n                t = t ? 1 : 0, W[this.ptr + 13] = t;\n            }\n            get_rethrown() {\n                return W[this.ptr + 13] != 0;\n            }\n            init(t, r) {\n                this.set_adjusted_ptr(0), this.set_type(t), this.set_destructor(r);\n            }\n            set_adjusted_ptr(t) {\n                w[this.ptr + 16 >> 2] = t;\n            }\n            get_adjusted_ptr() {\n                return w[this.ptr + 16 >> 2];\n            }\n            get_exception_ptr() {\n                var t = qt(this.get_type());\n                if (t) return w[this.excPtr >> 2];\n                var r = this.get_adjusted_ptr();\n                return r !== 0 ? r : this.excPtr;\n            }\n        }\n        var yr = (e)=>{\n            throw ne || (ne = e), ne;\n        }, Ce = (e)=>Vt(e), br = (e)=>{\n            var t = ne;\n            if (!t) return Ce(0), 0;\n            var r = new Ct(t);\n            r.set_adjusted_ptr(t);\n            var n = r.get_type();\n            if (!n) return Ce(0), t;\n            for(var i in e){\n                var s = e[i];\n                if (s === 0 || s === n) break;\n                var u = r.ptr + 16;\n                if (Nt(s, n, u)) return Ce(s), t;\n            }\n            return Ce(n), t;\n        }, Cr = ()=>br([]), Er = (e, t, r)=>{\n            var n = new Ct(e);\n            throw n.init(t, r), ne = e, ne;\n        };\n        function Pr(e, t, r) {\n            return 0;\n        }\n        var Tr = (e, t)=>{}, wt = (e)=>{\n            for(var t = 0, r = 0; r < e.length; ++r){\n                var n = e.charCodeAt(r);\n                n <= 127 ? t++ : n <= 2047 ? t += 2 : n >= 55296 && n <= 57343 ? (t += 4, ++r) : t += 3;\n            }\n            return t;\n        }, Et = (e, t, r, n)=>{\n            if (!(n > 0)) return 0;\n            for(var i = r, s = r + n - 1, u = 0; u < e.length; ++u){\n                var l = e.charCodeAt(u);\n                if (l >= 55296 && l <= 57343) {\n                    var d = e.charCodeAt(++u);\n                    l = 65536 + ((l & 1023) << 10) | d & 1023;\n                }\n                if (l <= 127) {\n                    if (r >= s) break;\n                    t[r++] = l;\n                } else if (l <= 2047) {\n                    if (r + 1 >= s) break;\n                    t[r++] = 192 | l >> 6, t[r++] = 128 | l & 63;\n                } else if (l <= 65535) {\n                    if (r + 2 >= s) break;\n                    t[r++] = 224 | l >> 12, t[r++] = 128 | l >> 6 & 63, t[r++] = 128 | l & 63;\n                } else {\n                    if (r + 3 >= s) break;\n                    t[r++] = 240 | l >> 18, t[r++] = 128 | l >> 12 & 63, t[r++] = 128 | l >> 6 & 63, t[r++] = 128 | l & 63;\n                }\n            }\n            return t[r] = 0, r - i;\n        }, Fr = (e, t, r)=>Et(e, $, t, r), Lr = (e, t)=>{};\n        function $r(e, t, r) {\n            return 0;\n        }\n        var Mr = (e, t, r, n)=>{};\n        function Ar(e, t, r, n) {}\n        var Sr = (e, t)=>{}, we = {}, Oe = (e)=>{\n            for(; e.length;){\n                var t = e.pop(), r = e.pop();\n                r(t);\n            }\n        };\n        function ue(e) {\n            return this.fromWireType(w[e >> 2]);\n        }\n        var ie = {}, J = {}, Ee = {}, Pt, Pe = (e)=>{\n            throw new Pt(e);\n        }, q = (e, t, r)=>{\n            e.forEach(function(l) {\n                Ee[l] = t;\n            });\n            function n(l) {\n                var d = r(l);\n                d.length !== e.length && Pe(\"Mismatched type converter count\");\n                for(var v = 0; v < e.length; ++v)H(e[v], d[v]);\n            }\n            var i = new Array(t.length), s = [], u = 0;\n            t.forEach((l, d)=>{\n                J.hasOwnProperty(l) ? i[d] = J[l] : (s.push(l), ie.hasOwnProperty(l) || (ie[l] = []), ie[l].push(()=>{\n                    i[d] = J[l], ++u, u === s.length && n(i);\n                }));\n            }), s.length === 0 && n(i);\n        }, kr = (e)=>{\n            var t = we[e];\n            delete we[e];\n            var r = t.rawConstructor, n = t.rawDestructor, i = t.fields, s = i.map((u)=>u.getterReturnType).concat(i.map((u)=>u.setterArgumentType));\n            q([\n                e\n            ], s, (u)=>{\n                var l = {};\n                return i.forEach((d, v)=>{\n                    var f = d.fieldName, m = u[v], _ = d.getter, C = d.getterContext, T = u[v + i.length], O = d.setter, S = d.setterContext;\n                    l[f] = {\n                        read: (L)=>m.fromWireType(_(C, L)),\n                        write: (L, c)=>{\n                            var p = [];\n                            O(S, L, T.toWireType(p, c)), Oe(p);\n                        }\n                    };\n                }), [\n                    {\n                        name: t.name,\n                        fromWireType: (d)=>{\n                            var v = {};\n                            for(var f in l)v[f] = l[f].read(d);\n                            return n(d), v;\n                        },\n                        toWireType: (d, v)=>{\n                            for(var f in l)if (!(f in v)) throw new TypeError(`Missing field: \"${f}\"`);\n                            var m = r();\n                            for(f in l)l[f].write(m, v[f]);\n                            return d !== null && d.push(n, m), m;\n                        },\n                        argPackAdvance: B,\n                        readValueFromPointer: ue,\n                        destructorFunction: n\n                    }\n                ];\n            });\n        }, Rr = (e, t, r, n, i)=>{}, xr = ()=>{\n            for(var e = new Array(256), t = 0; t < 256; ++t)e[t] = String.fromCharCode(t);\n            Tt = e;\n        }, Tt, M = (e)=>{\n            for(var t = \"\", r = e; $[r];)t += Tt[$[r++]];\n            return t;\n        }, ae, g = (e)=>{\n            throw new ae(e);\n        };\n        function Dr(e, t, r = {}) {\n            var n = t.name;\n            if (e || g(`type \"${n}\" must have a positive integer typeid pointer`), J.hasOwnProperty(e)) {\n                if (r.ignoreDuplicateRegistrations) return;\n                g(`Cannot register type '${n}' twice`);\n            }\n            if (J[e] = t, delete Ee[e], ie.hasOwnProperty(e)) {\n                var i = ie[e];\n                delete ie[e], i.forEach((s)=>s());\n            }\n        }\n        function H(e, t, r = {}) {\n            if (!(\"argPackAdvance\" in t)) throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");\n            return Dr(e, t, r);\n        }\n        var B = 8, Ir = (e, t, r, n)=>{\n            t = M(t), H(e, {\n                name: t,\n                fromWireType: function(i) {\n                    return !!i;\n                },\n                toWireType: function(i, s) {\n                    return s ? r : n;\n                },\n                argPackAdvance: B,\n                readValueFromPointer: function(i) {\n                    return this.fromWireType($[i]);\n                },\n                destructorFunction: null\n            });\n        }, jr = (e)=>({\n                count: e.count,\n                deleteScheduled: e.deleteScheduled,\n                preservePointerOnDelete: e.preservePointerOnDelete,\n                ptr: e.ptr,\n                ptrType: e.ptrType,\n                smartPtr: e.smartPtr,\n                smartPtrType: e.smartPtrType\n            }), We = (e)=>{\n            function t(r) {\n                return r.$$.ptrType.registeredClass.name;\n            }\n            g(t(e) + \" instance already deleted\");\n        }, Ue = false, Ft = (e)=>{}, Or = (e)=>{\n            e.smartPtr ? e.smartPtrType.rawDestructor(e.smartPtr) : e.ptrType.registeredClass.rawDestructor(e.ptr);\n        }, Lt = (e)=>{\n            e.count.value -= 1;\n            var t = e.count.value === 0;\n            t && Or(e);\n        }, $t = (e, t, r)=>{\n            if (t === r) return e;\n            if (r.baseClass === void 0) return null;\n            var n = $t(e, t, r.baseClass);\n            return n === null ? null : r.downcast(n);\n        }, Mt = {}, Wr = ()=>Object.keys(ve).length, Ur = ()=>{\n            var e = [];\n            for(var t in ve)ve.hasOwnProperty(t) && e.push(ve[t]);\n            return e;\n        }, de = [], He = ()=>{\n            for(; de.length;){\n                var e = de.pop();\n                e.$$.deleteScheduled = false, e.delete();\n            }\n        }, ce, Hr = (e)=>{\n            ce = e, de.length && ce && ce(He);\n        }, Br = ()=>{\n            o.getInheritedInstanceCount = Wr, o.getLiveInheritedInstances = Ur, o.flushPendingDeletes = He, o.setDelayFunction = Hr;\n        }, ve = {}, Vr = (e, t)=>{\n            for(t === void 0 && g(\"ptr should not be undefined\"); e.baseClass;)t = e.upcast(t), e = e.baseClass;\n            return t;\n        }, zr = (e, t)=>(t = Vr(e, t), ve[t]), Te = (e, t)=>{\n            (!t.ptrType || !t.ptr) && Pe(\"makeClassHandle requires ptr and ptrType\");\n            var r = !!t.smartPtrType, n = !!t.smartPtr;\n            return r !== n && Pe(\"Both smartPtrType and smartPtr must be specified\"), t.count = {\n                value: 1\n            }, fe(Object.create(e, {\n                $$: {\n                    value: t,\n                    writable: true\n                }\n            }));\n        };\n        function Yr(e) {\n            var t = this.getPointee(e);\n            if (!t) return this.destructor(e), null;\n            var r = zr(this.registeredClass, t);\n            if (r !== void 0) {\n                if (r.$$.count.value === 0) return r.$$.ptr = t, r.$$.smartPtr = e, r.clone();\n                var n = r.clone();\n                return this.destructor(e), n;\n            }\n            function i() {\n                return this.isSmartPointer ? Te(this.registeredClass.instancePrototype, {\n                    ptrType: this.pointeeType,\n                    ptr: t,\n                    smartPtrType: this,\n                    smartPtr: e\n                }) : Te(this.registeredClass.instancePrototype, {\n                    ptrType: this,\n                    ptr: e\n                });\n            }\n            var s = this.registeredClass.getActualType(t), u = Mt[s];\n            if (!u) return i.call(this);\n            var l;\n            this.isConst ? l = u.constPointerType : l = u.pointerType;\n            var d = $t(t, this.registeredClass, l.registeredClass);\n            return d === null ? i.call(this) : this.isSmartPointer ? Te(l.registeredClass.instancePrototype, {\n                ptrType: l,\n                ptr: d,\n                smartPtrType: this,\n                smartPtr: e\n            }) : Te(l.registeredClass.instancePrototype, {\n                ptrType: l,\n                ptr: d\n            });\n        }\n        var fe = (e)=>typeof FinalizationRegistry > \"u\" ? (fe = (t)=>t, e) : (Ue = new FinalizationRegistry((t)=>{\n                Lt(t.$$);\n            }), fe = (t)=>{\n                var r = t.$$, n = !!r.smartPtr;\n                if (n) {\n                    var i = {\n                        $$: r\n                    };\n                    Ue.register(t, i, t);\n                }\n                return t;\n            }, Ft = (t)=>Ue.unregister(t), fe(e)), Nr = ()=>{\n            Object.assign(Fe.prototype, {\n                isAliasOf (e) {\n                    if (!(this instanceof Fe) || !(e instanceof Fe)) return false;\n                    var t = this.$$.ptrType.registeredClass, r = this.$$.ptr;\n                    e.$$ = e.$$;\n                    for(var n = e.$$.ptrType.registeredClass, i = e.$$.ptr; t.baseClass;)r = t.upcast(r), t = t.baseClass;\n                    for(; n.baseClass;)i = n.upcast(i), n = n.baseClass;\n                    return t === n && r === i;\n                },\n                clone () {\n                    if (this.$$.ptr || We(this), this.$$.preservePointerOnDelete) return this.$$.count.value += 1, this;\n                    var e = fe(Object.create(Object.getPrototypeOf(this), {\n                        $$: {\n                            value: jr(this.$$)\n                        }\n                    }));\n                    return e.$$.count.value += 1, e.$$.deleteScheduled = false, e;\n                },\n                delete () {\n                    this.$$.ptr || We(this), this.$$.deleteScheduled && !this.$$.preservePointerOnDelete && g(\"Object already scheduled for deletion\"), Ft(this), Lt(this.$$), this.$$.preservePointerOnDelete || (this.$$.smartPtr = void 0, this.$$.ptr = void 0);\n                },\n                isDeleted () {\n                    return !this.$$.ptr;\n                },\n                deleteLater () {\n                    return this.$$.ptr || We(this), this.$$.deleteScheduled && !this.$$.preservePointerOnDelete && g(\"Object already scheduled for deletion\"), de.push(this), de.length === 1 && ce && ce(He), this.$$.deleteScheduled = true, this;\n                }\n            });\n        };\n        function Fe() {}\n        var pe = (e, t)=>Object.defineProperty(t, \"name\", {\n                value: e\n            }), At = (e, t, r)=>{\n            if (e[t].overloadTable === void 0) {\n                var n = e[t];\n                e[t] = function(...i) {\n                    return e[t].overloadTable.hasOwnProperty(i.length) || g(`Function '${r}' called with an invalid number of arguments (${i.length}) - expects one of (${e[t].overloadTable})!`), e[t].overloadTable[i.length].apply(this, i);\n                }, e[t].overloadTable = [], e[t].overloadTable[n.argCount] = n;\n            }\n        }, Be = (e, t, r)=>{\n            o.hasOwnProperty(e) ? ((r === void 0 || o[e].overloadTable !== void 0 && o[e].overloadTable[r] !== void 0) && g(`Cannot register public name '${e}' twice`), At(o, e, e), o.hasOwnProperty(r) && g(`Cannot register multiple overloads of a function with the same number of arguments (${r})!`), o[e].overloadTable[r] = t) : (o[e] = t, r !== void 0 && (o[e].numArguments = r));\n        }, qr = 48, Xr = 57, Gr = (e)=>{\n            if (e === void 0) return \"_unknown\";\n            e = e.replace(/[^a-zA-Z0-9_]/g, \"$\");\n            var t = e.charCodeAt(0);\n            return t >= qr && t <= Xr ? `_${e}` : e;\n        };\n        function Jr(e, t, r, n, i, s, u, l) {\n            this.name = e, this.constructor = t, this.instancePrototype = r, this.rawDestructor = n, this.baseClass = i, this.getActualType = s, this.upcast = u, this.downcast = l, this.pureVirtualFunctions = [];\n        }\n        var Ve = (e, t, r)=>{\n            for(; t !== r;)t.upcast || g(`Expected null or instance of ${r.name}, got an instance of ${t.name}`), e = t.upcast(e), t = t.baseClass;\n            return e;\n        };\n        function Kr(e, t) {\n            if (t === null) return this.isReference && g(`null is not a valid ${this.name}`), 0;\n            t.$$ || g(`Cannot pass \"${Ge(t)}\" as a ${this.name}`), t.$$.ptr || g(`Cannot pass deleted object as a pointer of type ${this.name}`);\n            var r = t.$$.ptrType.registeredClass, n = Ve(t.$$.ptr, r, this.registeredClass);\n            return n;\n        }\n        function Zr(e, t) {\n            var r;\n            if (t === null) return this.isReference && g(`null is not a valid ${this.name}`), this.isSmartPointer ? (r = this.rawConstructor(), e !== null && e.push(this.rawDestructor, r), r) : 0;\n            (!t || !t.$$) && g(`Cannot pass \"${Ge(t)}\" as a ${this.name}`), t.$$.ptr || g(`Cannot pass deleted object as a pointer of type ${this.name}`), !this.isConst && t.$$.ptrType.isConst && g(`Cannot convert argument of type ${t.$$.smartPtrType ? t.$$.smartPtrType.name : t.$$.ptrType.name} to parameter type ${this.name}`);\n            var n = t.$$.ptrType.registeredClass;\n            if (r = Ve(t.$$.ptr, n, this.registeredClass), this.isSmartPointer) switch(t.$$.smartPtr === void 0 && g(\"Passing raw pointer to smart pointer is illegal\"), this.sharingPolicy){\n                case 0:\n                    t.$$.smartPtrType === this ? r = t.$$.smartPtr : g(`Cannot convert argument of type ${t.$$.smartPtrType ? t.$$.smartPtrType.name : t.$$.ptrType.name} to parameter type ${this.name}`);\n                    break;\n                case 1:\n                    r = t.$$.smartPtr;\n                    break;\n                case 2:\n                    if (t.$$.smartPtrType === this) r = t.$$.smartPtr;\n                    else {\n                        var i = t.clone();\n                        r = this.rawShare(r, K.toHandle(()=>i.delete())), e !== null && e.push(this.rawDestructor, r);\n                    }\n                    break;\n                default:\n                    g(\"Unsupporting sharing policy\");\n            }\n            return r;\n        }\n        function Qr(e, t) {\n            if (t === null) return this.isReference && g(`null is not a valid ${this.name}`), 0;\n            t.$$ || g(`Cannot pass \"${Ge(t)}\" as a ${this.name}`), t.$$.ptr || g(`Cannot pass deleted object as a pointer of type ${this.name}`), t.$$.ptrType.isConst && g(`Cannot convert argument of type ${t.$$.ptrType.name} to parameter type ${this.name}`);\n            var r = t.$$.ptrType.registeredClass, n = Ve(t.$$.ptr, r, this.registeredClass);\n            return n;\n        }\n        var en = ()=>{\n            Object.assign(he.prototype, {\n                getPointee (e) {\n                    return this.rawGetPointee && (e = this.rawGetPointee(e)), e;\n                },\n                destructor (e) {\n                    this.rawDestructor?.(e);\n                },\n                argPackAdvance: B,\n                readValueFromPointer: ue,\n                fromWireType: Yr\n            });\n        };\n        function he(e, t, r, n, i, s, u, l, d, v, f) {\n            this.name = e, this.registeredClass = t, this.isReference = r, this.isConst = n, this.isSmartPointer = i, this.pointeeType = s, this.sharingPolicy = u, this.rawGetPointee = l, this.rawConstructor = d, this.rawShare = v, this.rawDestructor = f, !i && t.baseClass === void 0 ? n ? (this.toWireType = Kr, this.destructorFunction = null) : (this.toWireType = Qr, this.destructorFunction = null) : this.toWireType = Zr;\n        }\n        var St = (e, t, r)=>{\n            o.hasOwnProperty(e) || Pe(\"Replacing nonexistent public symbol\"), o[e].overloadTable !== void 0 && r !== void 0 ? o[e].overloadTable[r] = t : (o[e] = t, o[e].argCount = r);\n        }, tn = (e, t, r)=>{\n            e = e.replace(/p/g, \"i\");\n            var n = o[\"dynCall_\" + e];\n            return n(t, ...r);\n        }, kt, R = (e)=>kt.get(e), rn = (e, t, r = [])=>{\n            if (e.includes(\"j\")) return tn(e, t, r);\n            var n = R(t)(...r);\n            return n;\n        }, nn = (e, t)=>(...r)=>rn(e, t, r), x = (e, t)=>{\n            e = M(e);\n            function r() {\n                return e.includes(\"j\") ? nn(e, t) : R(t);\n            }\n            var n = r();\n            return typeof n != \"function\" && g(`unknown function pointer with signature ${e}: ${t}`), n;\n        }, an = (e, t)=>{\n            var r = pe(t, function(n) {\n                this.name = t, this.message = n;\n                var i = new Error(n).stack;\n                i !== void 0 && (this.stack = this.toString() + `\n` + i.replace(/^Error(:[^\\n]*)?\\n/, \"\"));\n            });\n            return r.prototype = Object.create(e.prototype), r.prototype.constructor = r, r.prototype.toString = function() {\n                return this.message === void 0 ? this.name : `${this.name}: ${this.message}`;\n            }, r;\n        }, Rt, xt = (e)=>{\n            var t = Bt(e), r = M(t);\n            return z(t), r;\n        }, Le = (e, t)=>{\n            var r = [], n = {};\n            function i(s) {\n                if (!n[s] && !J[s]) {\n                    if (Ee[s]) {\n                        Ee[s].forEach(i);\n                        return;\n                    }\n                    r.push(s), n[s] = true;\n                }\n            }\n            throw t.forEach(i), new Rt(`${e}: ` + r.map(xt).join([\n                \", \"\n            ]));\n        }, on = (e, t, r, n, i, s, u, l, d, v, f, m, _)=>{\n            f = M(f), s = x(i, s), l && (l = x(u, l)), v && (v = x(d, v)), _ = x(m, _);\n            var C = Gr(f);\n            Be(C, function() {\n                Le(`Cannot construct ${f} due to unbound types`, [\n                    n\n                ]);\n            }), q([\n                e,\n                t,\n                r\n            ], n ? [\n                n\n            ] : [], (T)=>{\n                var Ae;\n                T = T[0];\n                var O, S;\n                n ? (O = T.registeredClass, S = O.instancePrototype) : S = Fe.prototype;\n                var L = pe(f, function(...Qe) {\n                    if (Object.getPrototypeOf(this) !== c) throw new ae(\"Use 'new' to construct \" + f);\n                    if (p.constructor_body === void 0) throw new ae(f + \" has no accessible constructor\");\n                    var Jt = p.constructor_body[Qe.length];\n                    if (Jt === void 0) throw new ae(`Tried to invoke ctor of ${f} with invalid number of parameters (${Qe.length}) - expected (${Object.keys(p.constructor_body).toString()}) parameters instead!`);\n                    return Jt.apply(this, Qe);\n                }), c = Object.create(S, {\n                    constructor: {\n                        value: L\n                    }\n                });\n                L.prototype = c;\n                var p = new Jr(f, L, c, _, O, s, l, v);\n                p.baseClass && ((Ae = p.baseClass).__derivedClasses ?? (Ae.__derivedClasses = []), p.baseClass.__derivedClasses.push(p));\n                var k = new he(f, p, true, false, false), P = new he(f + \"*\", p, false, false, false), Y = new he(f + \" const*\", p, false, true, false);\n                return Mt[e] = {\n                    pointerType: P,\n                    constPointerType: Y\n                }, St(C, L), [\n                    k,\n                    P,\n                    Y\n                ];\n            });\n        }, ze = (e, t)=>{\n            for(var r = [], n = 0; n < e; n++)r.push(w[t + n * 4 >> 2]);\n            return r;\n        };\n        function sn(e) {\n            for(var t = 1; t < e.length; ++t)if (e[t] !== null && e[t].destructorFunction === void 0) return true;\n            return false;\n        }\n        function Ye(e, t, r, n, i, s) {\n            var u = t.length;\n            u < 2 && g(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");\n            var l = t[1] !== null && r !== null, d = sn(t), v = t[0].name !== \"void\", f = u - 2, m = new Array(f), _ = [], C = [], T = function(...O) {\n                O.length !== f && g(`function ${e} called with ${O.length} arguments, expected ${f}`), C.length = 0;\n                var S;\n                _.length = l ? 2 : 1, _[0] = i, l && (S = t[1].toWireType(C, this), _[1] = S);\n                for(var L = 0; L < f; ++L)m[L] = t[L + 2].toWireType(C, O[L]), _.push(m[L]);\n                var c = n(..._);\n                function p(k) {\n                    if (d) Oe(C);\n                    else for(var P = l ? 1 : 2; P < t.length; P++){\n                        var Y = P === 1 ? S : m[P - 2];\n                        t[P].destructorFunction !== null && t[P].destructorFunction(Y);\n                    }\n                    if (v) return t[0].fromWireType(k);\n                }\n                return p(c);\n            };\n            return pe(e, T);\n        }\n        var ln = (e, t, r, n, i, s)=>{\n            var u = ze(t, r);\n            i = x(n, i), q([], [\n                e\n            ], (l)=>{\n                l = l[0];\n                var d = `constructor ${l.name}`;\n                if (l.registeredClass.constructor_body === void 0 && (l.registeredClass.constructor_body = []), l.registeredClass.constructor_body[t - 1] !== void 0) throw new ae(`Cannot register multiple constructors with identical number of parameters (${t - 1}) for class '${l.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);\n                return l.registeredClass.constructor_body[t - 1] = ()=>{\n                    Le(`Cannot construct ${l.name} due to unbound types`, u);\n                }, q([], u, (v)=>(v.splice(1, 0, null), l.registeredClass.constructor_body[t - 1] = Ye(d, v, null, i, s), [])), [];\n            });\n        }, Dt = (e)=>{\n            e = e.trim();\n            let t = e.indexOf(\"(\");\n            return t !== -1 ? e.substr(0, t) : e;\n        }, un = (e, t, r, n, i, s, u, l, d)=>{\n            var v = ze(r, n);\n            t = M(t), t = Dt(t), s = x(i, s), q([], [\n                e\n            ], (f)=>{\n                f = f[0];\n                var m = `${f.name}.${t}`;\n                t.startsWith(\"@@\") && (t = Symbol[t.substring(2)]), l && f.registeredClass.pureVirtualFunctions.push(t);\n                function _() {\n                    Le(`Cannot call ${m} due to unbound types`, v);\n                }\n                var C = f.registeredClass.instancePrototype, T = C[t];\n                return T === void 0 || T.overloadTable === void 0 && T.className !== f.name && T.argCount === r - 2 ? (_.argCount = r - 2, _.className = f.name, C[t] = _) : (At(C, t, m), C[t].overloadTable[r - 2] = _), q([], v, (O)=>{\n                    var S = Ye(m, O, f, s, u);\n                    return C[t].overloadTable === void 0 ? (S.argCount = r - 2, C[t] = S) : C[t].overloadTable[r - 2] = S, [];\n                }), [];\n            });\n        }, Ne = [], V = [], qe = (e)=>{\n            e > 9 && --V[e + 1] === 0 && (V[e] = void 0, Ne.push(e));\n        }, dn = ()=>V.length / 2 - 5 - Ne.length, cn = ()=>{\n            V.push(0, 1, void 0, 1, null, 1, true, 1, false, 1), o.count_emval_handles = dn;\n        }, K = {\n            toValue: (e)=>(e || g(\"Cannot use deleted val. handle = \" + e), V[e]),\n            toHandle: (e)=>{\n                switch(e){\n                    case void 0:\n                        return 2;\n                    case null:\n                        return 4;\n                    case true:\n                        return 6;\n                    case false:\n                        return 8;\n                    default:\n                        {\n                            let t = Ne.pop() || V.length;\n                            return V[t] = e, V[t + 1] = 1, t;\n                        }\n                }\n            }\n        }, vn = {\n            name: \"emscripten::val\",\n            fromWireType: (e)=>{\n                var t = K.toValue(e);\n                return qe(e), t;\n            },\n            toWireType: (e, t)=>K.toHandle(t),\n            argPackAdvance: B,\n            readValueFromPointer: ue,\n            destructorFunction: null\n        }, It = (e)=>H(e, vn), fn = (e, t, r)=>{\n            switch(t){\n                case 1:\n                    return r ? function(n) {\n                        return this.fromWireType(W[n]);\n                    } : function(n) {\n                        return this.fromWireType($[n]);\n                    };\n                case 2:\n                    return r ? function(n) {\n                        return this.fromWireType(te[n >> 1]);\n                    } : function(n) {\n                        return this.fromWireType(se[n >> 1]);\n                    };\n                case 4:\n                    return r ? function(n) {\n                        return this.fromWireType(A[n >> 2]);\n                    } : function(n) {\n                        return this.fromWireType(w[n >> 2]);\n                    };\n                default:\n                    throw new TypeError(`invalid integer width (${t}): ${e}`);\n            }\n        }, pn = (e, t, r, n)=>{\n            t = M(t);\n            function i() {}\n            i.values = {}, H(e, {\n                name: t,\n                constructor: i,\n                fromWireType: function(s) {\n                    return this.constructor.values[s];\n                },\n                toWireType: (s, u)=>u.value,\n                argPackAdvance: B,\n                readValueFromPointer: fn(t, r, n),\n                destructorFunction: null\n            }), Be(t, i);\n        }, Xe = (e, t)=>{\n            var r = J[e];\n            return r === void 0 && g(`${t} has unknown type ${xt(e)}`), r;\n        }, hn = (e, t, r)=>{\n            var n = Xe(e, \"enum\");\n            t = M(t);\n            var i = n.constructor, s = Object.create(n.constructor.prototype, {\n                value: {\n                    value: r\n                },\n                constructor: {\n                    value: pe(`${n.name}_${t}`, function() {})\n                }\n            });\n            i.values[r] = s, i[t] = s;\n        }, Ge = (e)=>{\n            if (e === null) return \"null\";\n            var t = typeof e;\n            return t === \"object\" || t === \"array\" || t === \"function\" ? e.toString() : \"\" + e;\n        }, _n = (e, t)=>{\n            switch(t){\n                case 4:\n                    return function(r) {\n                        return this.fromWireType(dt[r >> 2]);\n                    };\n                case 8:\n                    return function(r) {\n                        return this.fromWireType(ct[r >> 3]);\n                    };\n                default:\n                    throw new TypeError(`invalid float width (${t}): ${e}`);\n            }\n        }, mn = (e, t, r)=>{\n            t = M(t), H(e, {\n                name: t,\n                fromWireType: (n)=>n,\n                toWireType: (n, i)=>i,\n                argPackAdvance: B,\n                readValueFromPointer: _n(t, r),\n                destructorFunction: null\n            });\n        }, gn = (e, t, r, n, i, s, u)=>{\n            var l = ze(t, r);\n            e = M(e), e = Dt(e), i = x(n, i), Be(e, function() {\n                Le(`Cannot call ${e} due to unbound types`, l);\n            }, t - 1), q([], l, (d)=>{\n                var v = [\n                    d[0],\n                    null\n                ].concat(d.slice(1));\n                return St(e, Ye(e, v, null, i, s), t - 1), [];\n            });\n        }, yn = (e, t, r)=>{\n            switch(t){\n                case 1:\n                    return r ? (n)=>W[n] : (n)=>$[n];\n                case 2:\n                    return r ? (n)=>te[n >> 1] : (n)=>se[n >> 1];\n                case 4:\n                    return r ? (n)=>A[n >> 2] : (n)=>w[n >> 2];\n                default:\n                    throw new TypeError(`invalid integer width (${t}): ${e}`);\n            }\n        }, bn = (e, t, r, n, i)=>{\n            t = M(t);\n            var s = (f)=>f;\n            if (n === 0) {\n                var u = 32 - 8 * r;\n                s = (f)=>f << u >>> u;\n            }\n            var l = t.includes(\"unsigned\"), d = (f, m)=>{}, v;\n            l ? v = function(f, m) {\n                return d(m, this.name), m >>> 0;\n            } : v = function(f, m) {\n                return d(m, this.name), m;\n            }, H(e, {\n                name: t,\n                fromWireType: s,\n                toWireType: v,\n                argPackAdvance: B,\n                readValueFromPointer: yn(t, r, n !== 0),\n                destructorFunction: null\n            });\n        }, Cn = (e, t, r)=>{\n            var n = [\n                Int8Array,\n                Uint8Array,\n                Int16Array,\n                Uint16Array,\n                Int32Array,\n                Uint32Array,\n                Float32Array,\n                Float64Array\n            ], i = n[t];\n            function s(u) {\n                var l = w[u >> 2], d = w[u + 4 >> 2];\n                return new i(W.buffer, d, l);\n            }\n            r = M(r), H(e, {\n                name: r,\n                fromWireType: s,\n                argPackAdvance: B,\n                readValueFromPointer: s\n            }, {\n                ignoreDuplicateRegistrations: true\n            });\n        }, wn = (e, t)=>{\n            It(e);\n        }, En = (e, t, r, n, i, s, u, l, d, v, f, m)=>{\n            r = M(r), s = x(i, s), l = x(u, l), v = x(d, v), m = x(f, m), q([\n                e\n            ], [\n                t\n            ], (_)=>{\n                _ = _[0];\n                var C = new he(r, _.registeredClass, false, false, true, _, n, s, l, v, m);\n                return [\n                    C\n                ];\n            });\n        }, Pn = (e, t)=>{\n            t = M(t);\n            var r = t === \"std::string\";\n            H(e, {\n                name: t,\n                fromWireType (n) {\n                    var i = w[n >> 2], s = n + 4, u;\n                    if (r) for(var l = s, d = 0; d <= i; ++d){\n                        var v = s + d;\n                        if (d == i || $[v] == 0) {\n                            var f = v - l, m = G(l, f);\n                            u === void 0 ? u = m : (u += \"\\x00\", u += m), l = v + 1;\n                        }\n                    }\n                    else {\n                        for(var _ = new Array(i), d = 0; d < i; ++d)_[d] = String.fromCharCode($[s + d]);\n                        u = _.join(\"\");\n                    }\n                    return z(n), u;\n                },\n                toWireType (n, i) {\n                    i instanceof ArrayBuffer && (i = new Uint8Array(i));\n                    var s, u = typeof i == \"string\";\n                    u || i instanceof Uint8Array || i instanceof Uint8ClampedArray || i instanceof Int8Array || g(\"Cannot pass non-string to std::string\"), r && u ? s = wt(i) : s = i.length;\n                    var l = Ze(4 + s + 1), d = l + 4;\n                    if (w[l >> 2] = s, r && u) Fr(i, d, s + 1);\n                    else if (u) for(var v = 0; v < s; ++v){\n                        var f = i.charCodeAt(v);\n                        f > 255 && (z(d), g(\"String has UTF-16 code units that do not fit in 8 bits\")), $[d + v] = f;\n                    }\n                    else for(var v = 0; v < s; ++v)$[d + v] = i[v];\n                    return n !== null && n.push(z, l), l;\n                },\n                argPackAdvance: B,\n                readValueFromPointer: ue,\n                destructorFunction (n) {\n                    z(n);\n                }\n            });\n        }, jt = typeof TextDecoder < \"u\" ? new TextDecoder(\"utf-16le\") : void 0, Tn = (e, t)=>{\n            for(var r = e, n = r >> 1, i = n + t / 2; !(n >= i) && se[n];)++n;\n            if (r = n << 1, r - e > 32 && jt) return jt.decode($.subarray(e, r));\n            for(var s = \"\", u = 0; !(u >= t / 2); ++u){\n                var l = te[e + u * 2 >> 1];\n                if (l == 0) break;\n                s += String.fromCharCode(l);\n            }\n            return s;\n        }, Fn = (e, t, r)=>{\n            if (r ?? (r = 2147483647), r < 2) return 0;\n            r -= 2;\n            for(var n = t, i = r < e.length * 2 ? r / 2 : e.length, s = 0; s < i; ++s){\n                var u = e.charCodeAt(s);\n                te[t >> 1] = u, t += 2;\n            }\n            return te[t >> 1] = 0, t - n;\n        }, Ln = (e)=>e.length * 2, $n = (e, t)=>{\n            for(var r = 0, n = \"\"; !(r >= t / 4);){\n                var i = A[e + r * 4 >> 2];\n                if (i == 0) break;\n                if (++r, i >= 65536) {\n                    var s = i - 65536;\n                    n += String.fromCharCode(55296 | s >> 10, 56320 | s & 1023);\n                } else n += String.fromCharCode(i);\n            }\n            return n;\n        }, Mn = (e, t, r)=>{\n            if (r ?? (r = 2147483647), r < 4) return 0;\n            for(var n = t, i = n + r - 4, s = 0; s < e.length; ++s){\n                var u = e.charCodeAt(s);\n                if (u >= 55296 && u <= 57343) {\n                    var l = e.charCodeAt(++s);\n                    u = 65536 + ((u & 1023) << 10) | l & 1023;\n                }\n                if (A[t >> 2] = u, t += 4, t + 4 > i) break;\n            }\n            return A[t >> 2] = 0, t - n;\n        }, An = (e)=>{\n            for(var t = 0, r = 0; r < e.length; ++r){\n                var n = e.charCodeAt(r);\n                n >= 55296 && n <= 57343 && ++r, t += 4;\n            }\n            return t;\n        }, Sn = (e, t, r)=>{\n            r = M(r);\n            var n, i, s, u;\n            t === 2 ? (n = Tn, i = Fn, u = Ln, s = (l)=>se[l >> 1]) : t === 4 && (n = $n, i = Mn, u = An, s = (l)=>w[l >> 2]), H(e, {\n                name: r,\n                fromWireType: (l)=>{\n                    for(var d = w[l >> 2], v, f = l + 4, m = 0; m <= d; ++m){\n                        var _ = l + 4 + m * t;\n                        if (m == d || s(_) == 0) {\n                            var C = _ - f, T = n(f, C);\n                            v === void 0 ? v = T : (v += \"\\x00\", v += T), f = _ + t;\n                        }\n                    }\n                    return z(l), v;\n                },\n                toWireType: (l, d)=>{\n                    typeof d != \"string\" && g(`Cannot pass non-string to C++ string type ${r}`);\n                    var v = u(d), f = Ze(4 + v + t);\n                    return w[f >> 2] = v / t, i(d, f + 4, v + t), l !== null && l.push(z, f), f;\n                },\n                argPackAdvance: B,\n                readValueFromPointer: ue,\n                destructorFunction (l) {\n                    z(l);\n                }\n            });\n        }, kn = (e, t, r, n, i, s)=>{\n            we[e] = {\n                name: M(t),\n                rawConstructor: x(r, n),\n                rawDestructor: x(i, s),\n                fields: []\n            };\n        }, Rn = (e, t, r, n, i, s, u, l, d, v)=>{\n            we[e].fields.push({\n                fieldName: M(t),\n                getterReturnType: r,\n                getter: x(n, i),\n                getterContext: s,\n                setterArgumentType: u,\n                setter: x(l, d),\n                setterContext: v\n            });\n        }, xn = (e, t)=>{\n            t = M(t), H(e, {\n                isVoid: true,\n                name: t,\n                argPackAdvance: 0,\n                fromWireType: ()=>{},\n                toWireType: (r, n)=>{}\n            });\n        }, Dn = (e, t, r)=>$.copyWithin(e, t, t + r), In = ()=>{\n            throw 1 / 0;\n        }, Je = [], jn = (e, t, r, n)=>(e = Je[e], t = K.toValue(t), e(null, t, r, n)), On = (e)=>{\n            var t = Je.length;\n            return Je.push(e), t;\n        }, Wn = (e, t)=>{\n            for(var r = new Array(e), n = 0; n < e; ++n)r[n] = Xe(w[t + n * 4 >> 2], \"parameter \" + n);\n            return r;\n        }, Un = Reflect.construct, Hn = (e, t, r)=>{\n            var n = [], i = e.toWireType(n, r);\n            return n.length && (w[t >> 2] = K.toHandle(n)), i;\n        }, Bn = (e, t, r)=>{\n            var n = Wn(e, t), i = n.shift();\n            e--;\n            var s = new Array(e), u = (d, v, f, m)=>{\n                for(var _ = 0, C = 0; C < e; ++C)s[C] = n[C].readValueFromPointer(m + _), _ += n[C].argPackAdvance;\n                var T = r === 1 ? Un(v, s) : v.apply(d, s);\n                return Hn(i, f, T);\n            }, l = `methodCaller<(${n.map((d)=>d.name).join(\", \")}) => ${i.name}>`;\n            return On(pe(l, u));\n        }, Vn = (e)=>{\n            e > 9 && (V[e + 1] += 1);\n        }, zn = (e)=>{\n            var t = K.toValue(e);\n            Oe(t), qe(e);\n        }, Yn = (e, t)=>{\n            e = Xe(e, \"_emval_take_value\");\n            var r = e.readValueFromPointer(t);\n            return K.toHandle(r);\n        }, Nn = ()=>{\n            be(\"\");\n        }, Ot;\n        Ot = ()=>performance.now();\n        var qn = ()=>2147483648, Xn = (e)=>{\n            var t = ye.buffer, r = (e - t.byteLength + 65535) / 65536;\n            try {\n                return ye.grow(r), vt(), 1;\n            } catch  {}\n        }, Gn = (e)=>{\n            var t = $.length;\n            e >>>= 0;\n            var r = qn();\n            if (e > r) return false;\n            for(var n = (d, v)=>d + (v - d % v) % v, i = 1; i <= 4; i *= 2){\n                var s = t * (1 + 0.2 / i);\n                s = Math.min(s, e + 100663296);\n                var u = Math.min(r, n(Math.max(e, s), 65536)), l = Xn(u);\n                if (l) return true;\n            }\n            return false;\n        }, Ke = {}, Jn = ()=>st || \"./this.program\", _e = ()=>{\n            if (!_e.strings) {\n                var e = (typeof navigator == \"object\" && navigator.languages && navigator.languages[0] || \"C\").replace(\"-\", \"_\") + \".UTF-8\", t = {\n                    USER: \"web_user\",\n                    LOGNAME: \"web_user\",\n                    PATH: \"/\",\n                    PWD: \"/\",\n                    HOME: \"/home/web_user\",\n                    LANG: e,\n                    _: Jn()\n                };\n                for(var r in Ke)Ke[r] === void 0 ? delete t[r] : t[r] = Ke[r];\n                var n = [];\n                for(var r in t)n.push(`${r}=${t[r]}`);\n                _e.strings = n;\n            }\n            return _e.strings;\n        }, Kn = (e, t)=>{\n            for(var r = 0; r < e.length; ++r)W[t++] = e.charCodeAt(r);\n            W[t] = 0;\n        }, Zn = (e, t)=>{\n            var r = 0;\n            return _e().forEach((n, i)=>{\n                var s = t + r;\n                w[e + i * 4 >> 2] = s, Kn(n, s), r += n.length + 1;\n            }), 0;\n        }, Qn = (e, t)=>{\n            var r = _e();\n            w[e >> 2] = r.length;\n            var n = 0;\n            return r.forEach((i)=>n += i.length + 1), w[t >> 2] = n, 0;\n        }, ei = (e)=>52, ti = (e, t, r, n)=>52;\n        function ni(e, t, r, n, i) {\n            return 70;\n        }\n        var ii = [\n            null,\n            [],\n            []\n        ], ai = (e, t)=>{\n            var r = ii[e];\n            t === 0 || t === 10 ? ((e === 1 ? nr : ee)(bt(r, 0)), r.length = 0) : r.push(t);\n        }, oi = (e, t, r, n)=>{\n            for(var i = 0, s = 0; s < r; s++){\n                var u = w[t >> 2], l = w[t + 4 >> 2];\n                t += 8;\n                for(var d = 0; d < l; d++)ai(e, $[u + d]);\n                i += l;\n            }\n            return w[n >> 2] = i, 0;\n        }, si = ()=>{\n            if (typeof crypto == \"object\" && typeof crypto.getRandomValues == \"function\") return (e)=>crypto.getRandomValues(e);\n            be(\"initRandomDevice\");\n        }, Wt = (e)=>(Wt = si())(e), li = (e, t)=>(Wt($.subarray(e, e + t)), 0), $e = (e)=>e % 4 === 0 && (e % 100 !== 0 || e % 400 === 0), ui = (e, t)=>{\n            for(var r = 0, n = 0; n <= t; r += e[n++]);\n            return r;\n        }, Ut = [\n            31,\n            29,\n            31,\n            30,\n            31,\n            30,\n            31,\n            31,\n            30,\n            31,\n            30,\n            31\n        ], Ht = [\n            31,\n            28,\n            31,\n            30,\n            31,\n            30,\n            31,\n            31,\n            30,\n            31,\n            30,\n            31\n        ], di = (e, t)=>{\n            for(var r = new Date(e.getTime()); t > 0;){\n                var n = $e(r.getFullYear()), i = r.getMonth(), s = (n ? Ut : Ht)[i];\n                if (t > s - r.getDate()) t -= s - r.getDate() + 1, r.setDate(1), i < 11 ? r.setMonth(i + 1) : (r.setMonth(0), r.setFullYear(r.getFullYear() + 1));\n                else return r.setDate(r.getDate() + t), r;\n            }\n            return r;\n        };\n        function ci(e, t, r) {\n            var n = r > 0 ? r : wt(e) + 1, i = new Array(n), s = Et(e, i, 0, i.length);\n            return t && (i.length = s), i;\n        }\n        var vi = (e, t)=>{\n            W.set(e, t);\n        }, fi = (e, t, r, n)=>{\n            var i = w[n + 40 >> 2], s = {\n                tm_sec: A[n >> 2],\n                tm_min: A[n + 4 >> 2],\n                tm_hour: A[n + 8 >> 2],\n                tm_mday: A[n + 12 >> 2],\n                tm_mon: A[n + 16 >> 2],\n                tm_year: A[n + 20 >> 2],\n                tm_wday: A[n + 24 >> 2],\n                tm_yday: A[n + 28 >> 2],\n                tm_isdst: A[n + 32 >> 2],\n                tm_gmtoff: A[n + 36 >> 2],\n                tm_zone: i ? G(i) : \"\"\n            }, u = G(r), l = {\n                \"%c\": \"%a %b %d %H:%M:%S %Y\",\n                \"%D\": \"%m/%d/%y\",\n                \"%F\": \"%Y-%m-%d\",\n                \"%h\": \"%b\",\n                \"%r\": \"%I:%M:%S %p\",\n                \"%R\": \"%H:%M\",\n                \"%T\": \"%H:%M:%S\",\n                \"%x\": \"%m/%d/%y\",\n                \"%X\": \"%H:%M:%S\",\n                \"%Ec\": \"%c\",\n                \"%EC\": \"%C\",\n                \"%Ex\": \"%m/%d/%y\",\n                \"%EX\": \"%H:%M:%S\",\n                \"%Ey\": \"%y\",\n                \"%EY\": \"%Y\",\n                \"%Od\": \"%d\",\n                \"%Oe\": \"%e\",\n                \"%OH\": \"%H\",\n                \"%OI\": \"%I\",\n                \"%Om\": \"%m\",\n                \"%OM\": \"%M\",\n                \"%OS\": \"%S\",\n                \"%Ou\": \"%u\",\n                \"%OU\": \"%U\",\n                \"%OV\": \"%V\",\n                \"%Ow\": \"%w\",\n                \"%OW\": \"%W\",\n                \"%Oy\": \"%y\"\n            };\n            for(var d in l)u = u.replace(new RegExp(d, \"g\"), l[d]);\n            var v = [\n                \"Sunday\",\n                \"Monday\",\n                \"Tuesday\",\n                \"Wednesday\",\n                \"Thursday\",\n                \"Friday\",\n                \"Saturday\"\n            ], f = [\n                \"January\",\n                \"February\",\n                \"March\",\n                \"April\",\n                \"May\",\n                \"June\",\n                \"July\",\n                \"August\",\n                \"September\",\n                \"October\",\n                \"November\",\n                \"December\"\n            ];\n            function m(c, p, k) {\n                for(var P = typeof c == \"number\" ? c.toString() : c || \"\"; P.length < p;)P = k[0] + P;\n                return P;\n            }\n            function _(c, p) {\n                return m(c, p, \"0\");\n            }\n            function C(c, p) {\n                function k(Y) {\n                    return Y < 0 ? -1 : Y > 0 ? 1 : 0;\n                }\n                var P;\n                return (P = k(c.getFullYear() - p.getFullYear())) === 0 && (P = k(c.getMonth() - p.getMonth())) === 0 && (P = k(c.getDate() - p.getDate())), P;\n            }\n            function T(c) {\n                switch(c.getDay()){\n                    case 0:\n                        return new Date(c.getFullYear() - 1, 11, 29);\n                    case 1:\n                        return c;\n                    case 2:\n                        return new Date(c.getFullYear(), 0, 3);\n                    case 3:\n                        return new Date(c.getFullYear(), 0, 2);\n                    case 4:\n                        return new Date(c.getFullYear(), 0, 1);\n                    case 5:\n                        return new Date(c.getFullYear() - 1, 11, 31);\n                    case 6:\n                        return new Date(c.getFullYear() - 1, 11, 30);\n                }\n            }\n            function O(c) {\n                var p = di(new Date(c.tm_year + 1900, 0, 1), c.tm_yday), k = new Date(p.getFullYear(), 0, 4), P = new Date(p.getFullYear() + 1, 0, 4), Y = T(k), Ae = T(P);\n                return C(Y, p) <= 0 ? C(Ae, p) <= 0 ? p.getFullYear() + 1 : p.getFullYear() : p.getFullYear() - 1;\n            }\n            var S = {\n                \"%a\": (c)=>v[c.tm_wday].substring(0, 3),\n                \"%A\": (c)=>v[c.tm_wday],\n                \"%b\": (c)=>f[c.tm_mon].substring(0, 3),\n                \"%B\": (c)=>f[c.tm_mon],\n                \"%C\": (c)=>{\n                    var p = c.tm_year + 1900;\n                    return _(p / 100 | 0, 2);\n                },\n                \"%d\": (c)=>_(c.tm_mday, 2),\n                \"%e\": (c)=>m(c.tm_mday, 2, \" \"),\n                \"%g\": (c)=>O(c).toString().substring(2),\n                \"%G\": O,\n                \"%H\": (c)=>_(c.tm_hour, 2),\n                \"%I\": (c)=>{\n                    var p = c.tm_hour;\n                    return p == 0 ? p = 12 : p > 12 && (p -= 12), _(p, 2);\n                },\n                \"%j\": (c)=>_(c.tm_mday + ui($e(c.tm_year + 1900) ? Ut : Ht, c.tm_mon - 1), 3),\n                \"%m\": (c)=>_(c.tm_mon + 1, 2),\n                \"%M\": (c)=>_(c.tm_min, 2),\n                \"%n\": ()=>`\n`,\n                \"%p\": (c)=>c.tm_hour >= 0 && c.tm_hour < 12 ? \"AM\" : \"PM\",\n                \"%S\": (c)=>_(c.tm_sec, 2),\n                \"%t\": ()=>\"\t\",\n                \"%u\": (c)=>c.tm_wday || 7,\n                \"%U\": (c)=>{\n                    var p = c.tm_yday + 7 - c.tm_wday;\n                    return _(Math.floor(p / 7), 2);\n                },\n                \"%V\": (c)=>{\n                    var p = Math.floor((c.tm_yday + 7 - (c.tm_wday + 6) % 7) / 7);\n                    if ((c.tm_wday + 371 - c.tm_yday - 2) % 7 <= 2 && p++, p) {\n                        if (p == 53) {\n                            var P = (c.tm_wday + 371 - c.tm_yday) % 7;\n                            P != 4 && (P != 3 || !$e(c.tm_year)) && (p = 1);\n                        }\n                    } else {\n                        p = 52;\n                        var k = (c.tm_wday + 7 - c.tm_yday - 1) % 7;\n                        (k == 4 || k == 5 && $e(c.tm_year % 400 - 1)) && p++;\n                    }\n                    return _(p, 2);\n                },\n                \"%w\": (c)=>c.tm_wday,\n                \"%W\": (c)=>{\n                    var p = c.tm_yday + 7 - (c.tm_wday + 6) % 7;\n                    return _(Math.floor(p / 7), 2);\n                },\n                \"%y\": (c)=>(c.tm_year + 1900).toString().substring(2),\n                \"%Y\": (c)=>c.tm_year + 1900,\n                \"%z\": (c)=>{\n                    var p = c.tm_gmtoff, k = p >= 0;\n                    return p = Math.abs(p) / 60, p = p / 60 * 100 + p % 60, (k ? \"+\" : \"-\") + (\"0000\" + p).slice(-4);\n                },\n                \"%Z\": (c)=>c.tm_zone,\n                \"%%\": ()=>\"%\"\n            };\n            u = u.replace(/%%/g, \"\\x00\\x00\");\n            for(var d in S)u.includes(d) && (u = u.replace(new RegExp(d, \"g\"), S[d](s)));\n            u = u.replace(/\\0\\0/g, \"%\");\n            var L = ci(u, false);\n            return L.length > t ? 0 : (vi(L, e), L.length - 1);\n        }, pi = (e, t, r, n, i)=>fi(e, t, r, n);\n        Pt = o.InternalError = class extends Error {\n            constructor(t){\n                super(t), this.name = \"InternalError\";\n            }\n        }, xr(), ae = o.BindingError = class extends Error {\n            constructor(t){\n                super(t), this.name = \"BindingError\";\n            }\n        }, Nr(), Br(), en(), Rt = o.UnboundTypeError = an(Error, \"UnboundTypeError\"), cn();\n        var hi = {\n            c: gr,\n            d: Cr,\n            q: Er,\n            h: yr,\n            F: Pr,\n            V: Tr,\n            S: Lr,\n            W: $r,\n            T: Mr,\n            E: Ar,\n            U: Sr,\n            A: kr,\n            N: Rr,\n            da: Ir,\n            v: on,\n            u: ln,\n            i: un,\n            ca: It,\n            C: pn,\n            n: hn,\n            I: mn,\n            K: gn,\n            p: bn,\n            k: Cn,\n            B: wn,\n            ja: En,\n            J: Pn,\n            z: Sn,\n            w: kn,\n            m: Rn,\n            ea: xn,\n            X: Dn,\n            O: In,\n            ha: jn,\n            P: qe,\n            ga: Bn,\n            ia: Vn,\n            fa: zn,\n            r: Yn,\n            ba: Nn,\n            l: Ot,\n            R: Gn,\n            Y: Zn,\n            Z: Qn,\n            y: ei,\n            D: ti,\n            M: ni,\n            x: oi,\n            _: li,\n            j: Di,\n            g: Bi,\n            f: Hi,\n            aa: ki,\n            s: Ui,\n            G: Oi,\n            t: ji,\n            b: Si,\n            a: Ri,\n            e: xi,\n            o: Wi,\n            H: Ii,\n            $: Vi,\n            L: zi,\n            Q: pi\n        }, b = mr(), Ze = (e)=>(Ze = b.ma)(e), Bt = (e)=>(Bt = b.na)(e), z = (e)=>(z = b.pa)(e), D = (e, t)=>(D = b.qa)(e, t), Vt = (e)=>(Vt = b.ra)(e), zt = (e)=>(zt = b.sa)(e), Yt = ()=>(Yt = b.ta)(), Nt = (e, t, r)=>(Nt = b.ua)(e, t, r), qt = (e)=>(qt = b.va)(e);\n        o.dynCall_iijj = (e, t, r, n, i, s)=>(o.dynCall_iijj = b.wa)(e, t, r, n, i, s);\n        o.dynCall_vijj = (e, t, r, n, i, s)=>(o.dynCall_vijj = b.xa)(e, t, r, n, i, s);\n        o.dynCall_jiii = (e, t, r, n)=>(o.dynCall_jiii = b.ya)(e, t, r, n);\n        o.dynCall_jii = (e, t, r)=>(o.dynCall_jii = b.za)(e, t, r);\n        var Xt = o.dynCall_viiij = (e, t, r, n, i, s)=>(Xt = o.dynCall_viiij = b.Aa)(e, t, r, n, i, s);\n        o.dynCall_jiji = (e, t, r, n, i)=>(o.dynCall_jiji = b.Ba)(e, t, r, n, i);\n        o.dynCall_viijii = (e, t, r, n, i, s, u)=>(o.dynCall_viijii = b.Ca)(e, t, r, n, i, s, u);\n        o.dynCall_iiiiij = (e, t, r, n, i, s, u)=>(o.dynCall_iiiiij = b.Da)(e, t, r, n, i, s, u);\n        o.dynCall_iiiiijj = (e, t, r, n, i, s, u, l, d)=>(o.dynCall_iiiiijj = b.Ea)(e, t, r, n, i, s, u, l, d);\n        o.dynCall_iiiiiijj = (e, t, r, n, i, s, u, l, d, v)=>(o.dynCall_iiiiiijj = b.Fa)(e, t, r, n, i, s, u, l, d, v);\n        function Si(e, t) {\n            var r = j();\n            try {\n                R(e)(t);\n            } catch (n) {\n                if (I(r), n !== n + 0) throw n;\n                D(1, 0);\n            }\n        }\n        function ki(e, t, r, n, i) {\n            var s = j();\n            try {\n                return R(e)(t, r, n, i);\n            } catch (u) {\n                if (I(s), u !== u + 0) throw u;\n                D(1, 0);\n            }\n        }\n        function Ri(e, t, r) {\n            var n = j();\n            try {\n                R(e)(t, r);\n            } catch (i) {\n                if (I(n), i !== i + 0) throw i;\n                D(1, 0);\n            }\n        }\n        function xi(e, t, r, n) {\n            var i = j();\n            try {\n                R(e)(t, r, n);\n            } catch (s) {\n                if (I(i), s !== s + 0) throw s;\n                D(1, 0);\n            }\n        }\n        function Di(e, t) {\n            var r = j();\n            try {\n                return R(e)(t);\n            } catch (n) {\n                if (I(r), n !== n + 0) throw n;\n                D(1, 0);\n            }\n        }\n        function Ii(e, t, r, n, i, s) {\n            var u = j();\n            try {\n                R(e)(t, r, n, i, s);\n            } catch (l) {\n                if (I(u), l !== l + 0) throw l;\n                D(1, 0);\n            }\n        }\n        function ji(e) {\n            var t = j();\n            try {\n                R(e)();\n            } catch (r) {\n                if (I(t), r !== r + 0) throw r;\n                D(1, 0);\n            }\n        }\n        function Oi(e, t, r, n, i, s, u, l) {\n            var d = j();\n            try {\n                return R(e)(t, r, n, i, s, u, l);\n            } catch (v) {\n                if (I(d), v !== v + 0) throw v;\n                D(1, 0);\n            }\n        }\n        function Wi(e, t, r, n, i) {\n            var s = j();\n            try {\n                R(e)(t, r, n, i);\n            } catch (u) {\n                if (I(s), u !== u + 0) throw u;\n                D(1, 0);\n            }\n        }\n        function Ui(e, t, r, n, i, s) {\n            var u = j();\n            try {\n                return R(e)(t, r, n, i, s);\n            } catch (l) {\n                if (I(u), l !== l + 0) throw l;\n                D(1, 0);\n            }\n        }\n        function Hi(e, t, r, n) {\n            var i = j();\n            try {\n                return R(e)(t, r, n);\n            } catch (s) {\n                if (I(i), s !== s + 0) throw s;\n                D(1, 0);\n            }\n        }\n        function Bi(e, t, r) {\n            var n = j();\n            try {\n                return R(e)(t, r);\n            } catch (i) {\n                if (I(n), i !== i + 0) throw i;\n                D(1, 0);\n            }\n        }\n        function Vi(e, t, r, n, i, s, u) {\n            var l = j();\n            try {\n                R(e)(t, r, n, i, s, u);\n            } catch (d) {\n                if (I(l), d !== d + 0) throw d;\n                D(1, 0);\n            }\n        }\n        function zi(e, t, r, n, i, s) {\n            var u = j();\n            try {\n                Xt(e, t, r, n, i, s);\n            } catch (l) {\n                if (I(u), l !== l + 0) throw l;\n                D(1, 0);\n            }\n        }\n        var Me;\n        le = function e() {\n            Me || Gt(), Me || (le = e);\n        };\n        function Gt() {\n            if (X > 0 || (or(), X > 0)) return;\n            function e() {\n                Me || (Me = true, o.calledRun = true, !ut && (sr(), h(o), o.onRuntimeInitialized && o.onRuntimeInitialized(), lr()));\n            }\n            o.setStatus ? (o.setStatus(\"Running...\"), setTimeout(function() {\n                setTimeout(function() {\n                    o.setStatus(\"\");\n                }, 1), e();\n            }, 1)) : e();\n        }\n        if (o.preInit) for(typeof o.preInit == \"function\" && (o.preInit = [\n            o.preInit\n        ]); o.preInit.length > 0;)o.preInit.pop()();\n        return Gt(), N;\n    };\n})();\nvar Kt = Xi;\nvar Z = class {\n    constructor(){\n        throw new Error(\"RendererLoader is a static class and cannot be instantiated.\");\n    }\n    static async _tryLoad(a) {\n        return await Kt({\n            locateFile: ()=>a\n        });\n    }\n    static async _loadWithBackup() {\n        return this._ModulePromise || (this._ModulePromise = this._tryLoad(this._wasmURL).catch(async (a)=>{\n            let o = `https://unpkg.com/${me.name}@${me.version}/dist/dotlottie-player.wasm`;\n            console.warn(`Primary WASM load failed from ${this._wasmURL}. Error: ${a.message}`), console.warn(`Attempting to load WASM from backup URL: ${o}`);\n            try {\n                return await this._tryLoad(o);\n            } catch (h) {\n                throw console.error(`Primary WASM URL failed: ${a.message}`), console.error(`Backup WASM URL failed: ${h.message}`), new Error(\"WASM loading failed from all sources.\");\n            }\n        })), this._ModulePromise;\n    }\n    static async load() {\n        return this._loadWithBackup();\n    }\n    static setWasmUrl(a) {\n        this._wasmURL = a, this._ModulePromise = null;\n    }\n};\nF(Z, \"_ModulePromise\", null), F(Z, \"_wasmURL\", `https://cdn.jsdelivr.net/npm/${me.name}@${me.version}/dist/dotlottie-player.wasm`);\nvar ke = class {\n    constructor(){\n        F(this, \"_eventListeners\", /* @__PURE__ */ new Map());\n    }\n    addEventListener(a, o) {\n        let h = this._eventListeners.get(a);\n        h || (h = /* @__PURE__ */ new Set(), this._eventListeners.set(a, h)), h.add(o);\n    }\n    removeEventListener(a, o) {\n        let h = this._eventListeners.get(a);\n        h && (o ? (h.delete(o), h.size === 0 && this._eventListeners.delete(a)) : this._eventListeners.delete(a));\n    }\n    dispatch(a) {\n        this._eventListeners.get(a.type)?.forEach((h)=>h(a));\n    }\n    removeAllEventListeners() {\n        this._eventListeners.clear();\n    }\n};\nvar nt = (y, a)=>y === \"reverse\" ? a.Mode.Reverse : y === \"bounce\" ? a.Mode.Bounce : y === \"reverse-bounce\" ? a.Mode.ReverseBounce : a.Mode.Forward;\nvar it = (y, a)=>y === \"contain\" ? a.Fit.Contain : y === \"cover\" ? a.Fit.Cover : y === \"fill\" ? a.Fit.Fill : y === \"fit-height\" ? a.Fit.FitHeight : y === \"fit-width\" ? a.Fit.FitWidth : a.Fit.None;\nvar at = (y, a)=>{\n    let o = new a.VectorFloat();\n    return o.push_back(y[0]), o.push_back(y[1]), o;\n};\nvar ot = (y, a)=>{\n    let o = new a.VectorFloat();\n    return y.length !== 2 || (o.push_back(y[0]), o.push_back(y[1])), o;\n};\nvar Zt = class {\n    constructor(a){\n        F(this, \"_canvas\");\n        F(this, \"_context\");\n        F(this, \"_eventManager\");\n        F(this, \"_animationFrameId\", null);\n        F(this, \"_frameManager\");\n        F(this, \"_dotLottieCore\", null);\n        F(this, \"_wasmModule\", null);\n        F(this, \"_renderConfig\", {});\n        F(this, \"_isFrozen\", false);\n        F(this, \"_backgroundColor\", null);\n        this._canvas = a.canvas, this._context = this._canvas.getContext(\"2d\"), this._eventManager = new ke(), this._frameManager = new Se(), this._renderConfig = a.renderConfig ?? {}, Z.load().then((o)=>{\n            this._wasmModule = o, this._dotLottieCore = new o.DotLottiePlayer({\n                autoplay: a.autoplay ?? false,\n                backgroundColor: 0,\n                loopAnimation: a.loop ?? false,\n                mode: nt(a.mode ?? \"forward\", o),\n                segment: ot(a.segment ?? [], o),\n                speed: a.speed ?? 1,\n                useFrameInterpolation: a.useFrameInterpolation ?? true,\n                marker: a.marker ?? \"\",\n                layout: a.layout ? {\n                    align: at(a.layout.align, o),\n                    fit: it(a.layout.fit, o)\n                } : o.createDefaultLayout()\n            }), a.data ? this._loadFromData(a.data) : a.src && this._loadFromSrc(a.src), a.backgroundColor && this.setBackgroundColor(a.backgroundColor);\n        }).catch((o)=>{\n            this._eventManager.dispatch({\n                type: \"loadError\",\n                error: new Error(`Failed to load wasm module: ${o}`)\n            });\n        });\n    }\n    _loadFromSrc(a) {\n        async function o() {\n            let h = await fetch(a);\n            if (!h.ok) throw new Error(`Failed to fetch the animation data from URL: ${a}. ${h.status}: ${h.statusText}`);\n            let E = (h.headers.get(\"content-type\") ?? \"\").trim(), N;\n            return [\n                \"application/json\",\n                \"text/plain\"\n            ].some((Q)=>E.startsWith(Q)) ? N = await h.text() : N = await h.arrayBuffer(), N;\n        }\n        o().then((h)=>{\n            this._loadFromData(h);\n        }).catch((h)=>{\n            this._eventManager.dispatch({\n                type: \"loadError\",\n                error: new Error(`Failed to load animation data from URL: ${a}. ${h}`)\n            });\n        });\n    }\n    _loadFromData(a) {\n        if (this._dotLottieCore === null) return;\n        let o = this._canvas.width, h = this._canvas.height, E = false;\n        if (typeof a == \"string\") E = this._dotLottieCore.loadAnimationData(a, o, h);\n        else if (a instanceof ArrayBuffer) E = this._dotLottieCore.loadDotLottieData(a, o, h);\n        else if (typeof a == \"object\") E = this._dotLottieCore.loadAnimationData(JSON.stringify(a), o, h);\n        else {\n            this._eventManager.dispatch({\n                type: \"loadError\",\n                error: new Error(\"Unsupported data type for animation data. Expected a string or ArrayBuffer.\")\n            });\n            return;\n        }\n        E ? (this._eventManager.dispatch({\n            type: \"load\"\n        }), rt && this.resize(), this._eventManager.dispatch({\n            type: \"frame\",\n            currentFrame: this._dotLottieCore.currentFrame()\n        }), this._render(), this._dotLottieCore.config().autoplay && (this._dotLottieCore.play(), this._dotLottieCore.isPlaying() ? (this._eventManager.dispatch({\n            type: \"play\"\n        }), this._animationFrameId = this._frameManager.requestAnimationFrame(this._draw.bind(this))) : console.error(\"something went wrong, the animation was suppose to autoplay\"))) : this._eventManager.dispatch({\n            type: \"loadError\",\n            error: new Error(\"Failed to load animation data\")\n        });\n    }\n    get activeAnimationId() {\n        return this._dotLottieCore?.activeAnimationId();\n    }\n    get activeThemeId() {\n        return this._dotLottieCore?.activeThemeId();\n    }\n    get layout() {\n        let a = this._dotLottieCore?.config().layout;\n        if (a) return {\n            align: [\n                a.align.get(0),\n                a.align.get(1)\n            ],\n            fit: (()=>{\n                switch(a.fit){\n                    case this._wasmModule?.Fit.Contain:\n                        return \"contain\";\n                    case this._wasmModule?.Fit.Cover:\n                        return \"cover\";\n                    case this._wasmModule?.Fit.Fill:\n                        return \"fill\";\n                    case this._wasmModule?.Fit.FitHeight:\n                        return \"fit-height\";\n                    case this._wasmModule?.Fit.FitWidth:\n                        return \"fit-width\";\n                    case this._wasmModule?.Fit.None:\n                        return \"none\";\n                    default:\n                        return \"contain\";\n                }\n            })()\n        };\n    }\n    get marker() {\n        return this._dotLottieCore?.config().marker;\n    }\n    get manifest() {\n        try {\n            let a = this._dotLottieCore?.manifestString();\n            if (this._dotLottieCore === null || !a) return null;\n            let o = JSON.parse(a);\n            return Object.keys(o).length === 0 ? null : o;\n        } catch  {\n            return null;\n        }\n    }\n    get renderConfig() {\n        return this._renderConfig;\n    }\n    get segment() {\n        let a = this._dotLottieCore?.config().segment;\n        if (a && a.size() === 2) return [\n            a.get(0),\n            a.get(1)\n        ];\n    }\n    get loop() {\n        return this._dotLottieCore?.config().loopAnimation ?? false;\n    }\n    get mode() {\n        let a = this._dotLottieCore?.config().mode;\n        return a === this._wasmModule?.Mode.Reverse ? \"reverse\" : a === this._wasmModule?.Mode.Bounce ? \"bounce\" : a === this._wasmModule?.Mode.ReverseBounce ? \"reverse-bounce\" : \"forward\";\n    }\n    get isFrozen() {\n        return this._isFrozen;\n    }\n    get backgroundColor() {\n        return this._backgroundColor ?? \"\";\n    }\n    get autoplay() {\n        return this._dotLottieCore?.config().autoplay ?? false;\n    }\n    get useFrameInterpolation() {\n        return this._dotLottieCore?.config().useFrameInterpolation ?? false;\n    }\n    get speed() {\n        return this._dotLottieCore?.config().speed ?? 0;\n    }\n    get isLoaded() {\n        return this._dotLottieCore?.isLoaded() ?? false;\n    }\n    get isPlaying() {\n        return this._dotLottieCore?.isPlaying() ?? false;\n    }\n    get isPaused() {\n        return this._dotLottieCore?.isPaused() ?? false;\n    }\n    get isStopped() {\n        return this._dotLottieCore?.isStopped() ?? false;\n    }\n    get currentFrame() {\n        return this._dotLottieCore?.currentFrame() ?? 0;\n    }\n    get loopCount() {\n        return this._dotLottieCore?.loopCount() ?? 0;\n    }\n    get totalFrames() {\n        return this._dotLottieCore?.totalFrames() ?? 0;\n    }\n    get duration() {\n        return this._dotLottieCore?.duration() ?? 0;\n    }\n    get segmentDuration() {\n        return this._dotLottieCore?.segmentDuration() ?? 0;\n    }\n    get canvas() {\n        return this._canvas;\n    }\n    load(a) {\n        this._dotLottieCore === null || this._wasmModule === null || (this._dotLottieCore.setConfig({\n            autoplay: a.autoplay ?? false,\n            backgroundColor: 0,\n            loopAnimation: a.loop ?? false,\n            mode: nt(a.mode ?? \"forward\", this._wasmModule),\n            segment: ot(a.segment ?? [], this._wasmModule),\n            speed: a.speed ?? 1,\n            useFrameInterpolation: a.useFrameInterpolation ?? true,\n            marker: a.marker ?? \"\",\n            layout: a.layout ? {\n                align: at(a.layout.align, this._wasmModule),\n                fit: it(a.layout.fit, this._wasmModule)\n            } : this._wasmModule.createDefaultLayout()\n        }), a.data ? this._loadFromData(a.data) : a.src && this._loadFromSrc(a.src), this.setBackgroundColor(a.backgroundColor ?? \"\"));\n    }\n    _render() {\n        if (this._dotLottieCore === null || this._context === null) return false;\n        if (this._dotLottieCore.render()) {\n            let o = this._dotLottieCore.buffer(), h = new Uint8ClampedArray(o, 0, this._canvas.width * this._canvas.height * 4), E = null;\n            return typeof ImageData > \"u\" ? (E = this._context.createImageData(this._canvas.width, this._canvas.height), E.data.set(h)) : E = new ImageData(h, this._canvas.width, this._canvas.height), this._context.putImageData(E, 0, 0), this._eventManager.dispatch({\n                type: \"render\",\n                currentFrame: this._dotLottieCore.currentFrame()\n            }), true;\n        }\n        return false;\n    }\n    _draw() {\n        if (this._dotLottieCore === null || this._context === null || !this._dotLottieCore.isPlaying()) return;\n        let a = this._dotLottieCore.requestFrame();\n        this._dotLottieCore.setFrame(a) && (this._eventManager.dispatch({\n            type: \"frame\",\n            currentFrame: this._dotLottieCore.currentFrame()\n        }), this._render() && this._dotLottieCore.isComplete() && (this._dotLottieCore.config().loopAnimation ? this._eventManager.dispatch({\n            type: \"loop\",\n            loopCount: this._dotLottieCore.loopCount()\n        }) : this._eventManager.dispatch({\n            type: \"complete\"\n        }))), this._animationFrameId = this._frameManager.requestAnimationFrame(this._draw.bind(this));\n    }\n    play() {\n        if (this._dotLottieCore === null) return;\n        let a = this._dotLottieCore.play();\n        this._isFrozen = false, a && (this._eventManager.dispatch({\n            type: \"play\"\n        }), this._animationFrameId = this._frameManager.requestAnimationFrame(this._draw.bind(this)));\n    }\n    pause() {\n        if (this._dotLottieCore === null) return;\n        this._dotLottieCore.pause() && this._eventManager.dispatch({\n            type: \"pause\"\n        });\n    }\n    stop() {\n        if (this._dotLottieCore === null) return;\n        this._dotLottieCore.stop() && (this._eventManager.dispatch({\n            type: \"frame\",\n            currentFrame: this._dotLottieCore.currentFrame()\n        }), this._render(), this._eventManager.dispatch({\n            type: \"stop\"\n        }));\n    }\n    setFrame(a) {\n        if (this._dotLottieCore === null || a < 0 || a > this._dotLottieCore.totalFrames()) return;\n        this._dotLottieCore.seek(a) && (this._eventManager.dispatch({\n            type: \"frame\",\n            currentFrame: this._dotLottieCore.currentFrame()\n        }), this._render());\n    }\n    setSpeed(a) {\n        this._dotLottieCore !== null && this._dotLottieCore.setConfig({\n            ...this._dotLottieCore.config(),\n            speed: a\n        });\n    }\n    setBackgroundColor(a) {\n        this._dotLottieCore !== null && (this._canvas instanceof HTMLCanvasElement && (this._canvas.style.backgroundColor = a), this._backgroundColor = a);\n    }\n    setLoop(a) {\n        this._dotLottieCore !== null && this._dotLottieCore.setConfig({\n            ...this._dotLottieCore.config(),\n            loopAnimation: a\n        });\n    }\n    setUseFrameInterpolation(a) {\n        this._dotLottieCore !== null && this._dotLottieCore.setConfig({\n            ...this._dotLottieCore.config(),\n            useFrameInterpolation: a\n        });\n    }\n    addEventListener(a, o) {\n        this._eventManager.addEventListener(a, o);\n    }\n    removeEventListener(a, o) {\n        this._eventManager.removeEventListener(a, o);\n    }\n    destroy() {\n        this._dotLottieCore?.delete(), this._dotLottieCore = null, this._context = null, this._eventManager.dispatch({\n            type: \"destroy\"\n        }), this._eventManager.removeAllEventListeners(), this._cleanupStateMachineListeners();\n    }\n    freeze() {\n        this._animationFrameId !== null && (this._frameManager.cancelAnimationFrame(this._animationFrameId), this._animationFrameId = null, this._isFrozen = true, this._eventManager.dispatch({\n            type: \"freeze\"\n        }));\n    }\n    unfreeze() {\n        this._animationFrameId === null && (this._animationFrameId = this._frameManager.requestAnimationFrame(this._draw.bind(this)), this._isFrozen = false, this._eventManager.dispatch({\n            type: \"unfreeze\"\n        }));\n    }\n    resize() {\n        if (rt && this._canvas instanceof HTMLCanvasElement) {\n            let o = this._renderConfig.devicePixelRatio || window.devicePixelRatio || 1, { height: h, width: E } = this._canvas.getBoundingClientRect();\n            this._canvas.width = E * o, this._canvas.height = h * o;\n        }\n        this._dotLottieCore?.resize(this._canvas.width, this._canvas.height) && this._render();\n    }\n    setSegment(a, o) {\n        this._dotLottieCore === null || this._wasmModule === null || this._dotLottieCore.setConfig({\n            ...this._dotLottieCore.config(),\n            segment: ot([\n                a,\n                o\n            ], this._wasmModule)\n        });\n    }\n    setMode(a) {\n        this._dotLottieCore === null || this._wasmModule === null || this._dotLottieCore.setConfig({\n            ...this._dotLottieCore.config(),\n            mode: nt(a, this._wasmModule)\n        });\n    }\n    setRenderConfig(a) {\n        this._renderConfig = a;\n    }\n    loadAnimation(a) {\n        if (this._dotLottieCore === null) return;\n        this._dotLottieCore.loadAnimation(a, this._canvas.width, this._canvas.height) ? (this._eventManager.dispatch({\n            type: \"load\"\n        }), this.resize()) : this._eventManager.dispatch({\n            type: \"loadError\",\n            error: new Error(`Failed to animation :${a}`)\n        });\n    }\n    setMarker(a) {\n        this._dotLottieCore !== null && this._dotLottieCore.setConfig({\n            ...this._dotLottieCore.config(),\n            marker: a\n        });\n    }\n    markers() {\n        let a = this._dotLottieCore?.markers();\n        if (a) {\n            let o = [];\n            for(let h = 0; h < a.size(); h += 1){\n                let E = a.get(h);\n                o.push({\n                    name: E.name,\n                    time: E.time,\n                    duration: E.duration\n                });\n            }\n            return o;\n        }\n        return [];\n    }\n    loadTheme(a) {\n        if (this._dotLottieCore === null) return false;\n        let o = this._dotLottieCore.loadTheme(a);\n        return this._render(), o;\n    }\n    loadThemeData(a) {\n        if (this._dotLottieCore === null) return false;\n        let o = this._dotLottieCore.loadThemeData(a);\n        return this._render(), o;\n    }\n    setLayout(a) {\n        this._dotLottieCore === null || this._wasmModule === null || this._dotLottieCore.setConfig({\n            ...this._dotLottieCore.config(),\n            layout: {\n                align: at(a.align, this._wasmModule),\n                fit: it(a.fit, this._wasmModule)\n            }\n        });\n    }\n    setViewport(a, o, h, E) {\n        return this._dotLottieCore === null ? false : this._dotLottieCore.setViewport(a, o, h, E);\n    }\n    static setWasmUrl(a) {\n        Z.setWasmUrl(a);\n    }\n    loadStateMachine(a) {\n        return this._dotLottieCore?.loadStateMachine(a) ?? false;\n    }\n    startStateMachine() {\n        let a = this._dotLottieCore?.startStateMachine() ?? false;\n        return a && this._setupStateMachineListeners(), a;\n    }\n    stopStateMachine() {\n        let a = this._dotLottieCore?.stopStateMachine() ?? false;\n        return a && this._cleanupStateMachineListeners(), a;\n    }\n    _getPointerPosition(a) {\n        let o = this._canvas.getBoundingClientRect(), h = this._canvas.width / o.width, E = this._canvas.height / o.height, N = this._renderConfig.devicePixelRatio || window.devicePixelRatio || 1, Q = (a.clientX - o.left) * h / N, Re = (a.clientY - o.top) * E / N;\n        return {\n            x: Q,\n            y: Re\n        };\n    }\n    _onPointerUp(a) {\n        let { x: o, y: h } = this._getPointerPosition(a);\n        this.postStateMachineEvent(`OnPointerUp: ${o} ${h}`);\n    }\n    _onPointerDown(a) {\n        let { x: o, y: h } = this._getPointerPosition(a);\n        this.postStateMachineEvent(`OnPointerDown: ${o} ${h}`);\n    }\n    _onPointerMove(a) {\n        let { x: o, y: h } = this._getPointerPosition(a);\n        this.postStateMachineEvent(`OnPointerMove: ${o} ${h}`);\n    }\n    _onPointerEnter(a) {\n        let { x: o, y: h } = this._getPointerPosition(a);\n        this.postStateMachineEvent(`OnPointerEnter: ${o} ${h}`);\n    }\n    _onPointerLeave(a) {\n        let { x: o, y: h } = this._getPointerPosition(a);\n        this.postStateMachineEvent(`OnPointerExit: ${o} ${h}`);\n    }\n    _onComplete() {\n        this.postStateMachineEvent(\"OnComplete\");\n    }\n    postStateMachineEvent(a) {\n        return this._dotLottieCore?.postEventPayload(a) ?? false;\n    }\n    _setupStateMachineListeners() {\n        if (this._canvas instanceof HTMLCanvasElement && this._dotLottieCore !== null && this.isLoaded) {\n            let a = this._dotLottieCore.stateMachineFrameworkSetup(), o = [];\n            for(let h = 0; h < a.size(); h += 1)o.push(a.get(h));\n            o.includes(\"PointerUp\") && this._canvas.addEventListener(\"pointerup\", this._onPointerUp.bind(this)), o.includes(\"PointerDown\") && this._canvas.addEventListener(\"pointerdown\", this._onPointerDown.bind(this)), o.includes(\"PointerMove\") && this._canvas.addEventListener(\"pointermove\", this._onPointerMove.bind(this)), o.includes(\"PointerEnter\") && this._canvas.addEventListener(\"pointerenter\", this._onPointerEnter.bind(this)), o.includes(\"PointerExit\") && this._canvas.addEventListener(\"pointerleave\", this._onPointerLeave.bind(this)), o.includes(\"Complete\") && this.addEventListener(\"complete\", this._onComplete.bind(this));\n        }\n    }\n    _cleanupStateMachineListeners() {\n        this._canvas instanceof HTMLCanvasElement && (this._canvas.removeEventListener(\"pointerup\", this._onPointerUp.bind(this)), this._canvas.removeEventListener(\"pointerdown\", this._onPointerDown.bind(this)), this._canvas.removeEventListener(\"pointermove\", this._onPointerMove.bind(this)), this._canvas.removeEventListener(\"pointerenter\", this._onPointerEnter.bind(this)), this._canvas.removeEventListener(\"pointerleave\", this._onPointerLeave.bind(this)), this.removeEventListener(\"complete\", this._onComplete.bind(this)));\n    }\n};\n// src/use-dotlottie.tsx\nvar import_debounce = __toESM(require_debounce(), 1);\nfunction DotLottieComponent({ children, className = \"\", setCanvasRef, setContainerRef, style, ...rest }) {\n    const containerStyle = {\n        width: \"100%\",\n        height: \"100%\",\n        ...style\n    };\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: setContainerRef,\n        className,\n        ...!className && {\n            style: containerStyle\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"canvas\", {\n        ref: setCanvasRef,\n        style: {\n            width: \"100%\",\n            height: \"100%\"\n        },\n        ...rest\n    }, children));\n}\nvar isServerSide = ()=>\"undefined\" === \"undefined\";\nvar useDotLottie = (config)=>{\n    const [dotLottie, setDotLottie] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const dotLottieRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const configRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(config);\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    dotLottieRef.current = dotLottie;\n    configRef.current = config;\n    const hoverHandler = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        if (!configRef.current?.playOnHover || !dotLottieRef.current?.isLoaded) return;\n        if (event.type === \"mouseenter\") {\n            dotLottieRef.current.play();\n        } else if (event.type === \"mouseleave\") {\n            dotLottieRef.current.pause();\n        }\n    }, []);\n    const intersectionObserver = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (isServerSide()) return null;\n        const observerCallback = (0, import_debounce.default)((entries)=>{\n            entries.forEach((entry)=>{\n                if (entry.isIntersecting) {\n                    dotLottieRef.current?.unfreeze();\n                } else {\n                    dotLottieRef.current?.freeze();\n                }\n            });\n        }, 150);\n        return new IntersectionObserver(observerCallback, {\n            threshold: 0\n        });\n    }, []);\n    const resizeObserver = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (isServerSide()) return null;\n        const observerCallback = (0, import_debounce.default)(()=>{\n            if (configRef.current?.autoResizeCanvas) {\n                dotLottieRef.current?.resize();\n            }\n        }, 150);\n        return new ResizeObserver(observerCallback);\n    }, []);\n    const setCanvasRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((canvas)=>{\n        canvasRef.current = canvas;\n    }, []);\n    const setContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((container)=>{\n        containerRef.current = container;\n    }, []);\n    const Component = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((props)=>{\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DotLottieComponent, {\n            setContainerRef,\n            setCanvasRef,\n            ...props\n        });\n    }, [\n        setCanvasRef,\n        setContainerRef\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const canvas = canvasRef.current;\n        let dotLottieInstance = null;\n        if (canvas) {\n            dotLottieInstance = new Zt({\n                ...configRef.current,\n                canvas\n            });\n            const initialEntry = canvas.getBoundingClientRect();\n            if (initialEntry.top >= 0 && initialEntry.left >= 0 && initialEntry.bottom <= (window.innerHeight || document.documentElement.clientHeight) && initialEntry.right <= (window.innerWidth || document.documentElement.clientWidth)) {\n                dotLottieInstance.unfreeze();\n            } else {\n                dotLottieInstance.freeze();\n            }\n            intersectionObserver?.observe(canvas);\n            if (config?.autoResizeCanvas) {\n                resizeObserver?.observe(canvas);\n            }\n            canvas.addEventListener(\"mouseenter\", hoverHandler);\n            canvas.addEventListener(\"mouseleave\", hoverHandler);\n            setDotLottie(dotLottieInstance);\n        }\n        return ()=>{\n            dotLottieInstance?.destroy();\n            setDotLottie(null);\n            resizeObserver?.disconnect();\n            intersectionObserver?.disconnect();\n            canvas?.removeEventListener(\"mouseenter\", hoverHandler);\n            canvas?.removeEventListener(\"mouseleave\", hoverHandler);\n        };\n    }, [\n        intersectionObserver,\n        resizeObserver,\n        hoverHandler\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!dotLottieRef.current) return;\n        if (typeof config?.speed === \"number\" && config.speed !== dotLottieRef.current.speed) {\n            dotLottieRef.current.setSpeed(config.speed);\n        }\n    }, [\n        config?.speed\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!dotLottieRef.current) return;\n        if (typeof config?.mode === \"string\" && config.mode !== dotLottieRef.current.mode) {\n            dotLottieRef.current.setMode(config.mode);\n        }\n    }, [\n        config?.mode\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!dotLottieRef.current) return;\n        if (typeof config?.loop === \"boolean\" && config.loop !== dotLottieRef.current.loop) {\n            dotLottieRef.current.setLoop(config.loop);\n        }\n    }, [\n        config?.loop\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!dotLottieRef.current) return;\n        if (typeof config?.useFrameInterpolation === \"boolean\" && config.useFrameInterpolation !== dotLottieRef.current.useFrameInterpolation) {\n            dotLottieRef.current.setUseFrameInterpolation(config.useFrameInterpolation);\n        }\n    }, [\n        config?.useFrameInterpolation\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!dotLottieRef.current) return;\n        if (typeof config?.segment === \"object\" && Array.isArray(config.segment) && // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        config.segment.length === 2) {\n            const startFrame = config.segment[0];\n            const endFrame = config.segment[1];\n            dotLottieRef.current.setSegment(startFrame, endFrame);\n        }\n    }, [\n        config?.segment\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!dotLottieRef.current) return;\n        if (typeof config?.backgroundColor === \"string\" && config.backgroundColor !== dotLottieRef.current.backgroundColor) {\n            dotLottieRef.current.setBackgroundColor(config.backgroundColor);\n        }\n    }, [\n        config?.backgroundColor\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!dotLottieRef.current) return;\n        if (typeof config?.renderConfig === \"object\") {\n            dotLottieRef.current.setRenderConfig(config.renderConfig);\n        }\n    }, [\n        JSON.stringify(config?.renderConfig)\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!dotLottieRef.current) return;\n        if (typeof config?.data === \"string\" || config?.data instanceof ArrayBuffer) {\n            dotLottieRef.current.load({\n                data: config.data,\n                ...configRef.current || {}\n            });\n        }\n    }, [\n        config?.data\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!dotLottieRef.current) return;\n        if (typeof config?.src === \"string\") {\n            dotLottieRef.current.load({\n                src: config.src,\n                ...configRef.current || {}\n            });\n        }\n    }, [\n        config?.src\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!dotLottieRef.current) return;\n        if (typeof config?.marker === \"string\") {\n            dotLottieRef.current.setMarker(config.marker);\n        }\n    }, [\n        config?.marker\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!resizeObserver) return;\n        if (config?.autoResizeCanvas && canvasRef.current) {\n            resizeObserver.observe(canvasRef.current);\n        } else {\n            resizeObserver.disconnect();\n        }\n    }, [\n        config?.autoResizeCanvas,\n        resizeObserver\n    ]);\n    return {\n        dotLottie,\n        setCanvasRef,\n        setContainerRef,\n        canvas: canvasRef.current,\n        container: containerRef.current,\n        DotLottieComponent: Component\n    };\n};\nvar setWasmUrl = (url)=>{\n    Zt.setWasmUrl(url);\n};\nvar useIsomorphicLayoutEffect =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nfunction useStableCallback(callback) {\n    const callbackContainer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(callback);\n    useIsomorphicLayoutEffect(()=>{\n        callbackContainer.current = callback;\n    });\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((...args)=>callbackContainer.current(...args), [\n        callbackContainer\n    ]);\n}\n// src/dotlottie.tsx\nvar DotLottieReact = ({ autoResizeCanvas = true, autoplay, backgroundColor, data, dotLottieRefCallback, loop, marker, mode, playOnHover, renderConfig, segment, speed, src, useFrameInterpolation, ...props })=>{\n    const { DotLottieComponent: DotLottieComponent2, dotLottie } = useDotLottie({\n        data,\n        mode,\n        speed,\n        src,\n        autoplay,\n        loop,\n        segment,\n        renderConfig,\n        backgroundColor,\n        useFrameInterpolation,\n        playOnHover,\n        autoResizeCanvas,\n        marker\n    });\n    const stableDotLottieRefCallback = typeof dotLottieRefCallback === \"function\" ? useStableCallback(dotLottieRefCallback) : void 0;\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (typeof stableDotLottieRefCallback === \"function\") {\n            stableDotLottieRefCallback(dotLottie);\n        }\n    }, [\n        stableDotLottieRefCallback,\n        dotLottie\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DotLottieComponent2, {\n        ...props\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lottiefiles/dotlottie-react/dist/index.js\n");

/***/ })

};
;